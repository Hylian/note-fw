
sdvxserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000018a8  0000193c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800130  00800130  0000196c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062a5  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e47  00000000  00000000  00007fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008980  00000000  00000000  00009e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba8  00000000  00000000  0001279c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017a41  00000000  00000000  00013344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048bf  00000000  00000000  0002ad85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c90  00000000  00000000  0002f644  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000750a  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c6       	rjmp	.+3172   	; 0xc8e <__vector_10>
      2a:	00 00       	nop
      2c:	f5 c6       	rjmp	.+3562   	; 0xe18 <__vector_11>
      2e:	00 00       	nop
      30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
      32:	00 00       	nop
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
      36:	00 00       	nop
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
      3e:	00 00       	nop
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
      42:	00 00       	nop
      44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
      46:	00 00       	nop
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
      4e:	00 00       	nop
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
      52:	00 00       	nop
      54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
      56:	00 00       	nop
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
      5e:	00 00       	nop
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
      62:	00 00       	nop
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
      66:	00 00       	nop
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
      6e:	00 00       	nop
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
      72:	00 00       	nop
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
      76:	00 00       	nop
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
      7e:	00 00       	nop
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
      82:	00 00       	nop
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
      8e:	00 00       	nop
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
      96:	00 00       	nop
      98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e8 ea       	ldi	r30, 0xA8	; 168
     14c:	f8 e1       	ldi	r31, 0x18	; 24
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a0 33       	cpi	r26, 0x30	; 48
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	a0 e3       	ldi	r26, 0x30	; 48
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a3 35       	cpi	r26, 0x53	; 83
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 34 09 	call	0x1268	; 0x1268 <main>
     16e:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     174:	29 2f       	mov	r18, r25
     176:	33 27       	eor	r19, r19
     178:	22 30       	cpi	r18, 0x02	; 2
     17a:	31 05       	cpc	r19, r1
     17c:	59 f0       	breq	.+22     	; 0x194 <CALLBACK_USB_GetDescriptor+0x20>
     17e:	23 30       	cpi	r18, 0x03	; 3
     180:	31 05       	cpc	r19, r1
     182:	69 f0       	breq	.+26     	; 0x19e <CALLBACK_USB_GetDescriptor+0x2a>
     184:	21 30       	cpi	r18, 0x01	; 1
     186:	31 05       	cpc	r19, r1
     188:	21 f5       	brne	.+72     	; 0x1d2 <CALLBACK_USB_GetDescriptor+0x5e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     18a:	82 e1       	ldi	r24, 0x12	; 18
     18c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     18e:	26 e2       	ldi	r18, 0x26	; 38
     190:	31 e0       	ldi	r19, 0x01	; 1
     192:	28 c0       	rjmp	.+80     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x70>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     194:	8e e3       	ldi	r24, 0x3E	; 62
     196:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     198:	28 ee       	ldi	r18, 0xE8	; 232
     19a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     19c:	23 c0       	rjmp	.+70     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     19e:	99 27       	eor	r25, r25
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	91 05       	cpc	r25, r1
     1a4:	51 f0       	breq	.+20     	; 0x1ba <CALLBACK_USB_GetDescriptor+0x46>
     1a6:	18 f0       	brcs	.+6      	; 0x1ae <CALLBACK_USB_GetDescriptor+0x3a>
     1a8:	02 97       	sbiw	r24, 0x02	; 2
     1aa:	69 f0       	breq	.+26     	; 0x1c6 <CALLBACK_USB_GetDescriptor+0x52>
     1ac:	17 c0       	rjmp	.+46     	; 0x1dc <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1ae:	e4 ee       	ldi	r30, 0xE4	; 228
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	84 91       	lpm	r24, Z
     1b4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1b6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1ba:	ea ec       	ldi	r30, 0xCA	; 202
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	84 91       	lpm	r24, Z
     1c0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1c2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1c6:	ec ea       	ldi	r30, 0xAC	; 172
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	84 91       	lpm	r24, Z
     1cc:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1ce:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1d0:	09 c0       	rjmp	.+18     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x70>
	uint16_t    Size    = NO_DESCRIPTOR;
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1e4:	fa 01       	movw	r30, r20
     1e6:	31 83       	std	Z+1, r19	; 0x01
     1e8:	20 83       	st	Z, r18
	return Size;
}
     1ea:	08 95       	ret

000001ec <EncoderInit>:
#define AR_MASK (1<<7)
#define BR_MASK (1<<0)

void EncoderInit(void)
{
  DDRB = 0x0;
     1ec:	14 b8       	out	0x04, r1	; 4
  al_prev = (bool) (PINB & AL_MASK);
     1ee:	83 b1       	in	r24, 0x03	; 3
     1f0:	85 fb       	bst	r24, 5
     1f2:	88 27       	eor	r24, r24
     1f4:	80 f9       	bld	r24, 0
     1f6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <al_prev>
  bl_prev = (bool) (PINB & BL_MASK);
     1fa:	83 b1       	in	r24, 0x03	; 3
     1fc:	86 fb       	bst	r24, 6
     1fe:	88 27       	eor	r24, r24
     200:	80 f9       	bld	r24, 0
     202:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <bl_prev>
  ar_prev = (bool) (PINB & AR_MASK);
     206:	83 b1       	in	r24, 0x03	; 3
     208:	88 1f       	adc	r24, r24
     20a:	88 27       	eor	r24, r24
     20c:	88 1f       	adc	r24, r24
     20e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <ar_prev>
  br_prev = (bool) (PINB & BR_MASK);
     212:	83 b1       	in	r24, 0x03	; 3
     214:	81 70       	andi	r24, 0x01	; 1
     216:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <br_prev>
     21a:	08 95       	ret

0000021c <EncoderUpdate>:
}

void EncoderUpdate(void)
{
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
  bool update = false;
  bool al, bl, ar, br;
  bool al_changed, bl_changed, ar_changed, br_changed;
  bool l_cw = 0, l_ccw = 0, r_cw = 0, r_ccw = 0;
  
  al = (bool) (PINB & AL_MASK);
     226:	83 b1       	in	r24, 0x03	; 3
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	a8 2f       	mov	r26, r24
     22c:	a0 72       	andi	r26, 0x20	; 32
     22e:	85 ff       	sbrs	r24, 5
     230:	20 e0       	ldi	r18, 0x00	; 0
  bl = (bool) (PINB & BL_MASK);
     232:	83 b1       	in	r24, 0x03	; 3
     234:	71 e0       	ldi	r23, 0x01	; 1
     236:	e8 2f       	mov	r30, r24
     238:	e0 74       	andi	r30, 0x40	; 64
     23a:	86 ff       	sbrs	r24, 6
     23c:	70 e0       	ldi	r23, 0x00	; 0
  ar = (bool) (PINB & AR_MASK);
     23e:	b3 b1       	in	r27, 0x03	; 3
     240:	5b 2f       	mov	r21, r27
     242:	55 1f       	adc	r21, r21
     244:	55 27       	eor	r21, r21
     246:	55 1f       	adc	r21, r21
  br = (bool) (PINB & BR_MASK);
     248:	83 b1       	in	r24, 0x03	; 3
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	98 2f       	mov	r25, r24
     24e:	91 70       	andi	r25, 0x01	; 1
     250:	f9 2e       	mov	r15, r25
     252:	80 ff       	sbrs	r24, 0
     254:	60 e0       	ldi	r22, 0x00	; 0
  
  al_changed = al ^ al_prev;
     256:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <al_prev>
     25a:	92 27       	eor	r25, r18
  bl_changed = bl ^ bl_prev;
     25c:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <bl_prev>
     260:	47 27       	eor	r20, r23
  ar_changed = ar ^ ar_prev;
     262:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <ar_prev>
     266:	85 27       	eor	r24, r21
  br_changed = br ^ br_prev;
     268:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <br_prev>
     26c:	36 27       	eor	r19, r22

  if (!(al_changed && bl_changed)) {
     26e:	99 23       	and	r25, r25
     270:	09 f4       	brne	.+2      	; 0x274 <EncoderUpdate+0x58>
     272:	a4 c0       	rjmp	.+328    	; 0x3bc <EncoderUpdate+0x1a0>
     274:	41 11       	cpse	r20, r1
     276:	3a c0       	rjmp	.+116    	; 0x2ec <EncoderUpdate+0xd0>
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	e1 11       	cpse	r30, r1
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	22 23       	and	r18, r18
     280:	11 f0       	breq	.+4      	; 0x286 <EncoderUpdate+0x6a>
     282:	f1 11       	cpse	r31, r1
     284:	2a c0       	rjmp	.+84     	; 0x2da <EncoderUpdate+0xbe>
     286:	01 e0       	ldi	r16, 0x01	; 1
     288:	10 e0       	ldi	r17, 0x00	; 0
     28a:	e1 e0       	ldi	r30, 0x01	; 1
     28c:	a1 11       	cpse	r26, r1
     28e:	e0 e0       	ldi	r30, 0x00	; 0
     290:	e7 23       	and	r30, r23
     292:	ce 2f       	mov	r28, r30
     294:	d0 e0       	ldi	r29, 0x00	; 0
     296:	c0 23       	and	r28, r16
     298:	d1 23       	and	r29, r17
     29a:	cd 2b       	or	r28, r29
     29c:	09 f0       	breq	.+2      	; 0x2a0 <EncoderUpdate+0x84>
     29e:	98 c0       	rjmp	.+304    	; 0x3d0 <EncoderUpdate+0x1b4>
           (bl_changed & ((bl & al) || (!bl & !al)));
     2a0:	c4 2f       	mov	r28, r20
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	22 23       	and	r18, r18
     2a6:	11 f0       	breq	.+4      	; 0x2ac <EncoderUpdate+0x90>
     2a8:	71 11       	cpse	r23, r1
     2aa:	07 c0       	rjmp	.+14     	; 0x2ba <EncoderUpdate+0x9e>
     2ac:	e1 e0       	ldi	r30, 0x01	; 1
     2ae:	a1 11       	cpse	r26, r1
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	fe 23       	and	r31, r30
     2b4:	ef 2f       	mov	r30, r31
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <EncoderUpdate+0xa2>
     2ba:	e1 e0       	ldi	r30, 0x01	; 1
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
  bl_changed = bl ^ bl_prev;
  ar_changed = ar ^ ar_prev;
  br_changed = br ^ br_prev;

  if (!(al_changed && bl_changed)) {
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
     2be:	ec 23       	and	r30, r28
     2c0:	fd 23       	and	r31, r29
     2c2:	11 e0       	ldi	r17, 0x01	; 1
     2c4:	ef 2b       	or	r30, r31
     2c6:	09 f4       	brne	.+2      	; 0x2ca <EncoderUpdate+0xae>
     2c8:	10 e0       	ldi	r17, 0x00	; 0
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
     2ca:	91 11       	cpse	r25, r1
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <EncoderUpdate+0xb6>
     2ce:	44 23       	and	r20, r20
     2d0:	11 f0       	breq	.+4      	; 0x2d6 <EncoderUpdate+0xba>
     2d2:	11 23       	and	r17, r17
     2d4:	29 f0       	breq	.+10     	; 0x2e0 <EncoderUpdate+0xc4>
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <EncoderUpdate+0xcc>
  bl_changed = bl ^ bl_prev;
  ar_changed = ar ^ ar_prev;
  br_changed = br ^ br_prev;

  if (!(al_changed && bl_changed)) {
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
     2da:	11 e0       	ldi	r17, 0x01	; 1
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <EncoderUpdate+0xcc>
     2e0:	a1 e0       	ldi	r26, 0x01	; 1
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <EncoderUpdate+0xcc>
  bl_changed = bl ^ bl_prev;
  ar_changed = ar ^ ar_prev;
  br_changed = br ^ br_prev;

  if (!(al_changed && bl_changed)) {
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
     2e4:	11 e0       	ldi	r17, 0x01	; 1
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	a1 70       	andi	r26, 0x01	; 1
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <EncoderUpdate+0xd4>
void EncoderUpdate(void)
{
  bool update = false;
  bool al, bl, ar, br;
  bool al_changed, bl_changed, ar_changed, br_changed;
  bool l_cw = 0, l_ccw = 0, r_cw = 0, r_ccw = 0;
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	10 e0       	ldi	r17, 0x00	; 0
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
  }

  if (!(ar_changed && br_changed)) {
     2f0:	88 23       	and	r24, r24
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <EncoderUpdate+0xda>
     2f4:	71 c0       	rjmp	.+226    	; 0x3d8 <EncoderUpdate+0x1bc>
     2f6:	31 11       	cpse	r19, r1
     2f8:	3e c0       	rjmp	.+124    	; 0x376 <EncoderUpdate+0x15a>
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
     2fa:	41 e0       	ldi	r20, 0x01	; 1
     2fc:	f1 10       	cpse	r15, r1
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	55 23       	and	r21, r21
     302:	11 f0       	breq	.+4      	; 0x308 <EncoderUpdate+0xec>
     304:	41 11       	cpse	r20, r1
     306:	2e c0       	rjmp	.+92     	; 0x364 <EncoderUpdate+0x148>
     308:	c1 e0       	ldi	r28, 0x01	; 1
     30a:	d0 e0       	ldi	r29, 0x00	; 0
     30c:	9b 2f       	mov	r25, r27
     30e:	90 95       	com	r25
     310:	99 1f       	adc	r25, r25
     312:	99 27       	eor	r25, r25
     314:	99 1f       	adc	r25, r25
     316:	96 23       	and	r25, r22
     318:	e9 2f       	mov	r30, r25
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	ec 23       	and	r30, r28
     31e:	fd 23       	and	r31, r29
     320:	ef 2b       	or	r30, r31
     322:	09 f0       	breq	.+2      	; 0x326 <EncoderUpdate+0x10a>
     324:	63 c0       	rjmp	.+198    	; 0x3ec <EncoderUpdate+0x1d0>
           (br_changed & ((br & ar) || (!br & !ar)));
     326:	c3 2f       	mov	r28, r19
     328:	d0 e0       	ldi	r29, 0x00	; 0
     32a:	55 23       	and	r21, r21
     32c:	11 f0       	breq	.+4      	; 0x332 <EncoderUpdate+0x116>
     32e:	61 11       	cpse	r22, r1
     330:	09 c0       	rjmp	.+18     	; 0x344 <EncoderUpdate+0x128>
     332:	eb 2f       	mov	r30, r27
     334:	e0 95       	com	r30
     336:	ee 1f       	adc	r30, r30
     338:	ee 27       	eor	r30, r30
     33a:	ee 1f       	adc	r30, r30
     33c:	4e 23       	and	r20, r30
     33e:	e4 2f       	mov	r30, r20
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <EncoderUpdate+0x12c>
     344:	e1 e0       	ldi	r30, 0x01	; 1
     346:	f0 e0       	ldi	r31, 0x00	; 0
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
  }

  if (!(ar_changed && br_changed)) {
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
     348:	ec 23       	and	r30, r28
     34a:	fd 23       	and	r31, r29
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	ef 2b       	or	r30, r31
     350:	09 f4       	brne	.+2      	; 0x354 <EncoderUpdate+0x138>
     352:	40 e0       	ldi	r20, 0x00	; 0
           (br_changed & ((br & ar) || (!br & !ar)));
    r_ccw = (ar_changed || br_changed) && !r_cw;
     354:	81 11       	cpse	r24, r1
     356:	02 c0       	rjmp	.+4      	; 0x35c <EncoderUpdate+0x140>
     358:	33 23       	and	r19, r19
     35a:	11 f0       	breq	.+4      	; 0x360 <EncoderUpdate+0x144>
     35c:	44 23       	and	r20, r20
     35e:	29 f0       	breq	.+10     	; 0x36a <EncoderUpdate+0x14e>
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	07 c0       	rjmp	.+14     	; 0x372 <EncoderUpdate+0x156>
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
  }

  if (!(ar_changed && br_changed)) {
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
     364:	41 e0       	ldi	r20, 0x01	; 1
           (br_changed & ((br & ar) || (!br & !ar)));
    r_ccw = (ar_changed || br_changed) && !r_cw;
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	04 c0       	rjmp	.+8      	; 0x372 <EncoderUpdate+0x156>
     36a:	31 e0       	ldi	r19, 0x01	; 1
     36c:	02 c0       	rjmp	.+4      	; 0x372 <EncoderUpdate+0x156>
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
  }

  if (!(ar_changed && br_changed)) {
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
     36e:	41 e0       	ldi	r20, 0x01	; 1
           (br_changed & ((br & ar) || (!br & !ar)));
    r_ccw = (ar_changed || br_changed) && !r_cw;
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	31 70       	andi	r19, 0x01	; 1
     374:	02 c0       	rjmp	.+4      	; 0x37a <EncoderUpdate+0x15e>
void EncoderUpdate(void)
{
  bool update = false;
  bool al, bl, ar, br;
  bool al_changed, bl_changed, ar_changed, br_changed;
  bool l_cw = 0, l_ccw = 0, r_cw = 0, r_ccw = 0;
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e0       	ldi	r20, 0x00	; 0
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
           (br_changed & ((br & ar) || (!br & !ar)));
    r_ccw = (ar_changed || br_changed) && !r_cw;
  }

  l_delta = l_delta + l_cw - l_ccw;
     37a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <l_delta>
     37e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <l_delta+0x1>
     382:	81 0f       	add	r24, r17
     384:	91 1d       	adc	r25, r1
     386:	8a 1b       	sub	r24, r26
     388:	91 09       	sbc	r25, r1
     38a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <l_delta+0x1>
     38e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <l_delta>
  r_delta = r_delta + r_cw - r_ccw;
     392:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     396:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     39a:	84 0f       	add	r24, r20
     39c:	91 1d       	adc	r25, r1
     39e:	83 1b       	sub	r24, r19
     3a0:	91 09       	sbc	r25, r1
     3a2:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
     3a6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>

  al_prev = al;
     3aa:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <al_prev>
  bl_prev = bl;
     3ae:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <bl_prev>
  ar_prev = ar;
     3b2:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <ar_prev>
  br_prev = br;
     3b6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <br_prev>
}
     3ba:	30 c0       	rjmp	.+96     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
  bl_changed = bl ^ bl_prev;
  ar_changed = ar ^ ar_prev;
  br_changed = br ^ br_prev;

  if (!(al_changed && bl_changed)) {
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	e1 11       	cpse	r30, r1
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	22 23       	and	r18, r18
     3c4:	11 f0       	breq	.+4      	; 0x3ca <EncoderUpdate+0x1ae>
     3c6:	f1 11       	cpse	r31, r1
     3c8:	17 c0       	rjmp	.+46     	; 0x3f8 <EncoderUpdate+0x1dc>
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	10 e0       	ldi	r17, 0x00	; 0
     3ce:	5d cf       	rjmp	.-326    	; 0x28a <EncoderUpdate+0x6e>
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
     3d0:	91 11       	cpse	r25, r1
     3d2:	88 cf       	rjmp	.-240    	; 0x2e4 <EncoderUpdate+0xc8>
  bl_changed = bl ^ bl_prev;
  ar_changed = ar ^ ar_prev;
  br_changed = br ^ br_prev;

  if (!(al_changed && bl_changed)) {
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
     3d4:	11 e0       	ldi	r17, 0x01	; 1
     3d6:	7b cf       	rjmp	.-266    	; 0x2ce <EncoderUpdate+0xb2>
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
  }

  if (!(ar_changed && br_changed)) {
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	f1 10       	cpse	r15, r1
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	55 23       	and	r21, r21
     3e0:	11 f0       	breq	.+4      	; 0x3e6 <EncoderUpdate+0x1ca>
     3e2:	41 11       	cpse	r20, r1
     3e4:	13 c0       	rjmp	.+38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3e6:	c0 e0       	ldi	r28, 0x00	; 0
     3e8:	d0 e0       	ldi	r29, 0x00	; 0
     3ea:	90 cf       	rjmp	.-224    	; 0x30c <EncoderUpdate+0xf0>
           (br_changed & ((br & ar) || (!br & !ar)));
    r_ccw = (ar_changed || br_changed) && !r_cw;
     3ec:	81 11       	cpse	r24, r1
     3ee:	bf cf       	rjmp	.-130    	; 0x36e <EncoderUpdate+0x152>
           (bl_changed & ((bl & al) || (!bl & !al)));
    l_ccw = (al_changed || bl_changed) && !l_cw;
  }

  if (!(ar_changed && br_changed)) {
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	b2 cf       	rjmp	.-156    	; 0x358 <EncoderUpdate+0x13c>
  bl_changed = bl ^ bl_prev;
  ar_changed = ar ^ ar_prev;
  br_changed = br ^ br_prev;

  if (!(al_changed && bl_changed)) {
    l_cw = (al_changed & ((al & !bl) || (!al & bl))) ||
     3f4:	14 2f       	mov	r17, r20
     3f6:	6b cf       	rjmp	.-298    	; 0x2ce <EncoderUpdate+0xb2>
           (bl_changed & ((bl & al) || (!bl & !al)));
     3f8:	c4 2f       	mov	r28, r20
     3fa:	d0 e0       	ldi	r29, 0x00	; 0
     3fc:	22 23       	and	r18, r18
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	55 cf       	rjmp	.-342    	; 0x2ac <EncoderUpdate+0x90>
     402:	71 11       	cpse	r23, r1
     404:	f7 cf       	rjmp	.-18     	; 0x3f4 <EncoderUpdate+0x1d8>
     406:	52 cf       	rjmp	.-348    	; 0x2ac <EncoderUpdate+0x90>
    l_ccw = (al_changed || bl_changed) && !l_cw;
  }

  if (!(ar_changed && br_changed)) {
    r_cw = (ar_changed & ((ar & !br) || (!ar & br))) ||
     408:	43 2f       	mov	r20, r19
     40a:	a6 cf       	rjmp	.-180    	; 0x358 <EncoderUpdate+0x13c>
           (br_changed & ((br & ar) || (!br & !ar)));
     40c:	c3 2f       	mov	r28, r19
     40e:	d0 e0       	ldi	r29, 0x00	; 0
     410:	55 23       	and	r21, r21
     412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	8e cf       	rjmp	.-228    	; 0x332 <EncoderUpdate+0x116>
     416:	61 11       	cpse	r22, r1
     418:	f7 cf       	rjmp	.-18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     41a:	8b cf       	rjmp	.-234    	; 0x332 <EncoderUpdate+0x116>

  al_prev = al;
  bl_prev = bl;
  ar_prev = ar;
  br_prev = br;
}
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	08 95       	ret

00000428 <EncoderGetLeftDelta>:

int EncoderGetLeftDelta(void)
{
  int ret = l_delta;
     428:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <l_delta>
     42c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <l_delta+0x1>
  l_delta = 0;
     430:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <l_delta+0x1>
     434:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <l_delta>
  return ret;
}
     438:	08 95       	ret

0000043a <EncoderGetRightDelta>:

int EncoderGetRightDelta(void)
{
  int ret = r_delta;
     43a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     43e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
  r_delta = 0;
     442:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x1>
     446:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
  return ret;
     44a:	08 95       	ret

0000044c <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ec 01       	movw	r28, r24
     452:	fc 01       	movw	r30, r24
     454:	70 96       	adiw	r30, 0x10	; 16
     456:	8b e0       	ldi	r24, 0x0B	; 11
     458:	df 01       	movw	r26, r30
     45a:	1d 92       	st	X+, r1
     45c:	8a 95       	dec	r24
     45e:	e9 f7       	brne	.-6      	; 0x45a <CDC_Device_ConfigureEndpoints+0xe>
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	8c 83       	std	Y+4, r24	; 0x04
     464:	89 87       	std	Y+9, r24	; 0x09
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	8e 87       	std	Y+14, r24	; 0x0e
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	fc d2       	rcall	.+1528   	; 0xa6a <Endpoint_ConfigureEndpointTable>
     472:	88 23       	and	r24, r24
     474:	51 f0       	breq	.+20     	; 0x48a <CDC_Device_ConfigureEndpoints+0x3e>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	ce 01       	movw	r24, r28
     47a:	06 96       	adiw	r24, 0x06	; 6
     47c:	f6 d2       	rcall	.+1516   	; 0xa6a <Endpoint_ConfigureEndpointTable>
     47e:	88 23       	and	r24, r24
     480:	21 f0       	breq	.+8      	; 0x48a <CDC_Device_ConfigureEndpoints+0x3e>
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	ce 01       	movw	r24, r28
     486:	0b 96       	adiw	r24, 0x0b	; 11
     488:	f0 d2       	rcall	.+1504   	; 0xa6a <Endpoint_ConfigureEndpointTable>
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <CDC_Device_SendByte>:
     490:	cf 93       	push	r28
     492:	fc 01       	movw	r30, r24
     494:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <USB_DeviceState>
     498:	94 30       	cpi	r25, 0x04	; 4
     49a:	e9 f4       	brne	.+58     	; 0x4d6 <CDC_Device_SendByte+0x46>
     49c:	84 89       	ldd	r24, Z+20	; 0x14
     49e:	95 89       	ldd	r25, Z+21	; 0x15
     4a0:	a6 89       	ldd	r26, Z+22	; 0x16
     4a2:	b7 89       	ldd	r27, Z+23	; 0x17
     4a4:	89 2b       	or	r24, r25
     4a6:	8a 2b       	or	r24, r26
     4a8:	8b 2b       	or	r24, r27
     4aa:	b9 f0       	breq	.+46     	; 0x4da <CDC_Device_SendByte+0x4a>
     4ac:	c6 2f       	mov	r28, r22
     4ae:	81 81       	ldd	r24, Z+1	; 0x01
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     4b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4ba:	85 fd       	sbrc	r24, 5
     4bc:	08 c0       	rjmp	.+16     	; 0x4ce <CDC_Device_SendByte+0x3e>
     4be:	e8 ee       	ldi	r30, 0xE8	; 232
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	8e 77       	andi	r24, 0x7E	; 126
     4c6:	80 83       	st	Z, r24
     4c8:	43 d3       	rcall	.+1670   	; 0xb50 <Endpoint_WaitUntilReady>
     4ca:	81 11       	cpse	r24, r1
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <CDC_Device_SendByte+0x4c>
     4ce:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <CDC_Device_SendByte+0x4c>
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <CDC_Device_SendByte+0x4c>
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <CDC_Device_putchar>:
     4e0:	fb 01       	movw	r30, r22
     4e2:	68 2f       	mov	r22, r24
     4e4:	84 85       	ldd	r24, Z+12	; 0x0c
     4e6:	95 85       	ldd	r25, Z+13	; 0x0d
     4e8:	d3 df       	rcall	.-90     	; 0x490 <CDC_Device_SendByte>
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	81 11       	cpse	r24, r1
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <CDC_Device_putchar+0x16>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	88 27       	eor	r24, r24
     4f8:	99 27       	eor	r25, r25
     4fa:	82 1b       	sub	r24, r18
     4fc:	93 0b       	sbc	r25, r19
     4fe:	08 95       	ret

00000500 <CDC_Device_Flush>:
     500:	fc 01       	movw	r30, r24
     502:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <USB_DeviceState>
     506:	94 30       	cpi	r25, 0x04	; 4
     508:	29 f5       	brne	.+74     	; 0x554 <CDC_Device_Flush+0x54>
     50a:	84 89       	ldd	r24, Z+20	; 0x14
     50c:	95 89       	ldd	r25, Z+21	; 0x15
     50e:	a6 89       	ldd	r26, Z+22	; 0x16
     510:	b7 89       	ldd	r27, Z+23	; 0x17
     512:	89 2b       	or	r24, r25
     514:	8a 2b       	or	r24, r26
     516:	8b 2b       	or	r24, r27
     518:	f9 f0       	breq	.+62     	; 0x558 <CDC_Device_Flush+0x58>
     51a:	81 81       	ldd	r24, Z+1	; 0x01
     51c:	8f 70       	andi	r24, 0x0F	; 15
     51e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     522:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     526:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	92 2b       	or	r25, r18
     52e:	89 2b       	or	r24, r25
     530:	a9 f0       	breq	.+42     	; 0x55c <CDC_Device_Flush+0x5c>
     532:	e8 ee       	ldi	r30, 0xE8	; 232
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	90 81       	ld	r25, Z
     538:	80 81       	ld	r24, Z
     53a:	8e 77       	andi	r24, 0x7E	; 126
     53c:	80 83       	st	Z, r24
     53e:	95 fd       	sbrc	r25, 5
     540:	0f c0       	rjmp	.+30     	; 0x560 <CDC_Device_Flush+0x60>
     542:	06 d3       	rcall	.+1548   	; 0xb50 <Endpoint_WaitUntilReady>
     544:	81 11       	cpse	r24, r1
     546:	0d c0       	rjmp	.+26     	; 0x562 <CDC_Device_Flush+0x62>
     548:	e8 ee       	ldi	r30, 0xE8	; 232
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	90 81       	ld	r25, Z
     54e:	9e 77       	andi	r25, 0x7E	; 126
     550:	90 83       	st	Z, r25
     552:	08 95       	ret
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	08 95       	ret
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	08 95       	ret
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	08 95       	ret
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	08 95       	ret

00000564 <CDC_Device_USBTask>:
     564:	fc 01       	movw	r30, r24
     566:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <USB_DeviceState>
     56a:	94 30       	cpi	r25, 0x04	; 4
     56c:	91 f4       	brne	.+36     	; 0x592 <CDC_Device_USBTask+0x2e>
     56e:	84 89       	ldd	r24, Z+20	; 0x14
     570:	95 89       	ldd	r25, Z+21	; 0x15
     572:	a6 89       	ldd	r26, Z+22	; 0x16
     574:	b7 89       	ldd	r27, Z+23	; 0x17
     576:	89 2b       	or	r24, r25
     578:	8a 2b       	or	r24, r26
     57a:	8b 2b       	or	r24, r27
     57c:	51 f0       	breq	.+20     	; 0x592 <CDC_Device_USBTask+0x2e>
     57e:	81 81       	ldd	r24, Z+1	; 0x01
     580:	8f 70       	andi	r24, 0x0F	; 15
     582:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     586:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     58a:	80 ff       	sbrs	r24, 0
     58c:	02 c0       	rjmp	.+4      	; 0x592 <CDC_Device_USBTask+0x2e>
     58e:	cf 01       	movw	r24, r30
     590:	b7 cf       	rjmp	.-146    	; 0x500 <CDC_Device_Flush>
     592:	08 95       	ret

00000594 <CDC_Device_ReceiveByte>:
     594:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <USB_DeviceState>
     598:	24 30       	cpi	r18, 0x04	; 4
     59a:	79 f5       	brne	.+94     	; 0x5fa <CDC_Device_ReceiveByte+0x66>
     59c:	fc 01       	movw	r30, r24
     59e:	44 89       	ldd	r20, Z+20	; 0x14
     5a0:	55 89       	ldd	r21, Z+21	; 0x15
     5a2:	66 89       	ldd	r22, Z+22	; 0x16
     5a4:	77 89       	ldd	r23, Z+23	; 0x17
     5a6:	45 2b       	or	r20, r21
     5a8:	46 2b       	or	r20, r22
     5aa:	47 2b       	or	r20, r23
     5ac:	49 f1       	breq	.+82     	; 0x600 <CDC_Device_ReceiveByte+0x6c>
     5ae:	86 81       	ldd	r24, Z+6	; 0x06
     5b0:	8f 70       	andi	r24, 0x0F	; 15
     5b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     5b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5ba:	82 ff       	sbrs	r24, 2
     5bc:	24 c0       	rjmp	.+72     	; 0x606 <CDC_Device_ReceiveByte+0x72>
     5be:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     5c2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	92 2b       	or	r25, r18
     5ca:	89 2b       	or	r24, r25
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <CDC_Device_ReceiveByte+0x42>
     5ce:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <CDC_Device_ReceiveByte+0x46>
     5d6:	2f ef       	ldi	r18, 0xFF	; 255
     5d8:	3f ef       	ldi	r19, 0xFF	; 255
     5da:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     5de:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	94 2b       	or	r25, r20
     5e6:	89 2b       	or	r24, r25
     5e8:	89 f4       	brne	.+34     	; 0x60c <CDC_Device_ReceiveByte+0x78>
     5ea:	e8 ee       	ldi	r30, 0xE8	; 232
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8b 77       	andi	r24, 0x7B	; 123
     5f2:	80 83       	st	Z, r24
     5f4:	82 2f       	mov	r24, r18
     5f6:	93 2f       	mov	r25, r19
     5f8:	08 95       	ret
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
     5fc:	9f ef       	ldi	r25, 0xFF	; 255
     5fe:	08 95       	ret
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	9f ef       	ldi	r25, 0xFF	; 255
     604:	08 95       	ret
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	9f ef       	ldi	r25, 0xFF	; 255
     60a:	08 95       	ret
     60c:	82 2f       	mov	r24, r18
     60e:	93 2f       	mov	r25, r19
     610:	08 95       	ret

00000612 <CDC_Device_getchar>:
     612:	fc 01       	movw	r30, r24
     614:	84 85       	ldd	r24, Z+12	; 0x0c
     616:	95 85       	ldd	r25, Z+13	; 0x0d
     618:	bd df       	rcall	.-134    	; 0x594 <CDC_Device_ReceiveByte>
     61a:	99 23       	and	r25, r25
     61c:	14 f4       	brge	.+4      	; 0x622 <CDC_Device_getchar+0x10>
     61e:	8e ef       	ldi	r24, 0xFE	; 254
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	08 95       	ret

00000624 <CDC_Device_CreateStream>:
     624:	fb 01       	movw	r30, r22
     626:	2e e0       	ldi	r18, 0x0E	; 14
     628:	db 01       	movw	r26, r22
     62a:	1d 92       	st	X+, r1
     62c:	2a 95       	dec	r18
     62e:	e9 f7       	brne	.-6      	; 0x62a <CDC_Device_CreateStream+0x6>
     630:	23 e0       	ldi	r18, 0x03	; 3
     632:	23 83       	std	Z+3, r18	; 0x03
     634:	20 e7       	ldi	r18, 0x70	; 112
     636:	32 e0       	ldi	r19, 0x02	; 2
     638:	31 87       	std	Z+9, r19	; 0x09
     63a:	20 87       	std	Z+8, r18	; 0x08
     63c:	29 e0       	ldi	r18, 0x09	; 9
     63e:	33 e0       	ldi	r19, 0x03	; 3
     640:	33 87       	std	Z+11, r19	; 0x0b
     642:	22 87       	std	Z+10, r18	; 0x0a
     644:	95 87       	std	Z+13, r25	; 0x0d
     646:	84 87       	std	Z+12, r24	; 0x0c
     648:	08 95       	ret

0000064a <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     64a:	08 95       	ret

0000064c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     652:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
     656:	93 ff       	sbrs	r25, 3
     658:	96 c0       	rjmp	.+300    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     65a:	20 81       	ld	r18, Z
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <USB_ControlRequest+0x4>
     662:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <USB_ControlRequest+0x5>
     666:	82 17       	cp	r24, r18
     668:	93 07       	cpc	r25, r19
     66a:	09 f0       	breq	.+2      	; 0x66e <CDC_Device_ProcessControlRequest+0x22>
     66c:	8c c0       	rjmp	.+280    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     66e:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
     670:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest+0x1>
     674:	81 32       	cpi	r24, 0x21	; 33
     676:	59 f0       	breq	.+22     	; 0x68e <CDC_Device_ProcessControlRequest+0x42>
     678:	18 f4       	brcc	.+6      	; 0x680 <CDC_Device_ProcessControlRequest+0x34>
     67a:	80 32       	cpi	r24, 0x20	; 32
     67c:	b9 f1       	breq	.+110    	; 0x6ec <CDC_Device_ProcessControlRequest+0xa0>
     67e:	83 c0       	rjmp	.+262    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     680:	82 32       	cpi	r24, 0x22	; 34
     682:	09 f4       	brne	.+2      	; 0x686 <CDC_Device_ProcessControlRequest+0x3a>
     684:	5f c0       	rjmp	.+190    	; 0x744 <CDC_Device_ProcessControlRequest+0xf8>
     686:	83 32       	cpi	r24, 0x23	; 35
     688:	09 f4       	brne	.+2      	; 0x68c <CDC_Device_ProcessControlRequest+0x40>
     68a:	6f c0       	rjmp	.+222    	; 0x76a <CDC_Device_ProcessControlRequest+0x11e>
     68c:	7c c0       	rjmp	.+248    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     68e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <USB_ControlRequest>
     692:	81 3a       	cpi	r24, 0xA1	; 161
     694:	09 f0       	breq	.+2      	; 0x698 <CDC_Device_ProcessControlRequest+0x4c>
     696:	77 c0       	rjmp	.+238    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     698:	e8 ee       	ldi	r30, 0xE8	; 232
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	87 7f       	andi	r24, 0xF7	; 247
     6a0:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6a2:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     6a4:	80 ff       	sbrs	r24, 0
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     6a8:	8c 89       	ldd	r24, Y+20	; 0x14
     6aa:	9d 89       	ldd	r25, Y+21	; 0x15
     6ac:	ae 89       	ldd	r26, Y+22	; 0x16
     6ae:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     6b0:	e1 ef       	ldi	r30, 0xF1	; 241
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
     6b6:	49 2f       	mov	r20, r25
     6b8:	5a 2f       	mov	r21, r26
     6ba:	6b 2f       	mov	r22, r27
     6bc:	77 27       	eor	r23, r23
     6be:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
     6c0:	ad 01       	movw	r20, r26
     6c2:	66 27       	eor	r22, r22
     6c4:	77 27       	eor	r23, r23
     6c6:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
     6c8:	8b 2f       	mov	r24, r27
     6ca:	99 27       	eor	r25, r25
     6cc:	aa 27       	eor	r26, r26
     6ce:	bb 27       	eor	r27, r27
     6d0:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     6d2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6d4:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     6d6:	89 8d       	ldd	r24, Y+25	; 0x19
     6d8:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     6da:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6dc:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6de:	e8 ee       	ldi	r30, 0xE8	; 232
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	8e 77       	andi	r24, 0x7E	; 126

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     6e6:	80 83       	st	Z, r24
     6e8:	0f d2       	rcall	.+1054   	; 0xb08 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6ea:	4d c0       	rjmp	.+154    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     6ec:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <USB_ControlRequest>
     6f0:	81 32       	cpi	r24, 0x21	; 33
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <CDC_Device_ProcessControlRequest+0xaa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6f4:	48 c0       	rjmp	.+144    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     6f6:	e8 ee       	ldi	r30, 0xE8	; 232
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	87 7f       	andi	r24, 0xF7	; 247
     6fe:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     700:	05 c0       	rjmp	.+10     	; 0x70c <CDC_Device_ProcessControlRequest+0xc0>
     702:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>
     706:	88 23       	and	r24, r24
     708:	09 f4       	brne	.+2      	; 0x70c <CDC_Device_ProcessControlRequest+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     70a:	3d c0       	rjmp	.+122    	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     70c:	80 81       	ld	r24, Z
     70e:	82 ff       	sbrs	r24, 2
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     710:	f8 cf       	rjmp	.-16     	; 0x702 <CDC_Device_ProcessControlRequest+0xb6>
     712:	e1 ef       	ldi	r30, 0xF1	; 241
     714:	f0 e0       	ldi	r31, 0x00	; 0
				Data.Bytes[1] = UEDATX;
     716:	30 81       	ld	r19, Z
				Data.Bytes[2] = UEDATX;
     718:	20 81       	ld	r18, Z
				Data.Bytes[3] = UEDATX;
     71a:	90 81       	ld	r25, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     71c:	80 81       	ld	r24, Z
     71e:	3c 8b       	std	Y+20, r19	; 0x14
     720:	2d 8b       	std	Y+21, r18	; 0x15
     722:	9e 8b       	std	Y+22, r25	; 0x16
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     724:	8f 8b       	std	Y+23, r24	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     726:	80 81       	ld	r24, Z
     728:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     72a:	80 81       	ld	r24, Z
     72c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     72e:	80 81       	ld	r24, Z
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     730:	8a 8f       	std	Y+26, r24	; 0x1a
     732:	e8 ee       	ldi	r30, 0xE8	; 232
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     738:	8b 77       	andi	r24, 0x7B	; 123

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     73a:	80 83       	st	Z, r24
     73c:	e5 d1       	rcall	.+970    	; 0xb08 <Endpoint_ClearStatusStage>
     73e:	ce 01       	movw	r24, r28
     740:	84 df       	rcall	.-248    	; 0x64a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     742:	21 c0       	rjmp	.+66     	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     744:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <USB_ControlRequest>
     748:	81 32       	cpi	r24, 0x21	; 33
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     74a:	e9 f4       	brne	.+58     	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     74c:	e8 ee       	ldi	r30, 0xE8	; 232
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     752:	87 7f       	andi	r24, 0xF7	; 247
     754:	80 83       	st	Z, r24

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     756:	d8 d1       	rcall	.+944    	; 0xb08 <Endpoint_ClearStatusStage>
     758:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x2>
     75c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <USB_ControlRequest+0x3>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     760:	99 8b       	std	Y+17, r25	; 0x11
     762:	88 8b       	std	Y+16, r24	; 0x10
     764:	ce 01       	movw	r24, r28
     766:	9c d5       	rcall	.+2872   	; 0x12a0 <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     768:	0e c0       	rjmp	.+28     	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     76a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <USB_ControlRequest>
     76e:	81 32       	cpi	r24, 0x21	; 33
     770:	51 f4       	brne	.+20     	; 0x786 <CDC_Device_ProcessControlRequest+0x13a>
     772:	e8 ee       	ldi	r30, 0xE8	; 232
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     778:	87 7f       	andi	r24, 0xF7	; 247
     77a:	80 83       	st	Z, r24
     77c:	c5 d1       	rcall	.+906    	; 0xb08 <Endpoint_ClearStatusStage>
     77e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <USB_ControlRequest+0x2>
			}

			break;
	}
}
     782:	ce 01       	movw	r24, r28
     784:	62 df       	rcall	.-316    	; 0x64a <CDC_Device_Event_Stub>
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <USB_ControlRequest+0x6>
     79e:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <USB_ControlRequest+0x7>
     7a2:	26 17       	cp	r18, r22
     7a4:	37 07       	cpc	r19, r23
     7a6:	58 f0       	brcs	.+22     	; 0x7be <Endpoint_Write_Control_Stream_LE+0x32>
     7a8:	61 15       	cp	r22, r1
     7aa:	71 05       	cpc	r23, r1
     7ac:	39 f4       	brne	.+14     	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x30>
     7ae:	e8 ee       	ldi	r30, 0xE8	; 232
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	20 81       	ld	r18, Z
     7b4:	2e 77       	andi	r18, 0x7E	; 126
     7b6:	20 83       	st	Z, r18
     7b8:	9b 01       	movw	r18, r22
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <Endpoint_Write_Control_Stream_LE+0x32>
     7bc:	9b 01       	movw	r18, r22
     7be:	a8 2f       	mov	r26, r24
     7c0:	b9 2f       	mov	r27, r25
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	e8 ee       	ldi	r30, 0xE8	; 232
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	63 ef       	ldi	r22, 0xF3	; 243
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	42 ef       	ldi	r20, 0xF2	; 242
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f1 ef       	ldi	r31, 0xF1	; 241
     7d4:	cf 2e       	mov	r12, r31
     7d6:	d1 2c       	mov	r13, r1
     7d8:	f0 2d       	mov	r31, r0
     7da:	01 e0       	ldi	r16, 0x01	; 1
     7dc:	f1 2c       	mov	r15, r1
     7de:	30 c0       	rjmp	.+96     	; 0x840 <Endpoint_Write_Control_Stream_LE+0xb4>
     7e0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>
     7e4:	88 23       	and	r24, r24
     7e6:	09 f4       	brne	.+2      	; 0x7ea <Endpoint_Write_Control_Stream_LE+0x5e>
     7e8:	42 c0       	rjmp	.+132    	; 0x86e <Endpoint_Write_Control_Stream_LE+0xe2>
     7ea:	85 30       	cpi	r24, 0x05	; 5
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x64>
     7ee:	41 c0       	rjmp	.+130    	; 0x872 <Endpoint_Write_Control_Stream_LE+0xe6>
     7f0:	80 81       	ld	r24, Z
     7f2:	83 fd       	sbrc	r24, 3
     7f4:	40 c0       	rjmp	.+128    	; 0x876 <Endpoint_Write_Control_Stream_LE+0xea>
     7f6:	80 81       	ld	r24, Z
     7f8:	82 fd       	sbrc	r24, 2
     7fa:	32 c0       	rjmp	.+100    	; 0x860 <Endpoint_Write_Control_Stream_LE+0xd4>
     7fc:	80 81       	ld	r24, Z
     7fe:	80 ff       	sbrs	r24, 0
     800:	1f c0       	rjmp	.+62     	; 0x840 <Endpoint_Write_Control_Stream_LE+0xb4>
     802:	eb 01       	movw	r28, r22
     804:	18 81       	ld	r17, Y
     806:	ea 01       	movw	r28, r20
     808:	88 81       	ld	r24, Y
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	91 2b       	or	r25, r17
     80e:	21 15       	cp	r18, r1
     810:	31 05       	cpc	r19, r1
     812:	79 f0       	breq	.+30     	; 0x832 <Endpoint_Write_Control_Stream_LE+0xa6>
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	91 05       	cpc	r25, r1
     818:	60 f4       	brcc	.+24     	; 0x832 <Endpoint_Write_Control_Stream_LE+0xa6>
     81a:	1d 91       	ld	r17, X+
     81c:	e6 01       	movw	r28, r12
     81e:	18 83       	st	Y, r17
     820:	21 50       	subi	r18, 0x01	; 1
     822:	31 09       	sbc	r19, r1
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	21 15       	cp	r18, r1
     828:	31 05       	cpc	r19, r1
     82a:	19 f0       	breq	.+6      	; 0x832 <Endpoint_Write_Control_Stream_LE+0xa6>
     82c:	88 30       	cpi	r24, 0x08	; 8
     82e:	91 05       	cpc	r25, r1
     830:	a1 f7       	brne	.-24     	; 0x81a <Endpoint_Write_Control_Stream_LE+0x8e>
     832:	10 2f       	mov	r17, r16
     834:	08 97       	sbiw	r24, 0x08	; 8
     836:	09 f0       	breq	.+2      	; 0x83a <Endpoint_Write_Control_Stream_LE+0xae>
     838:	1f 2d       	mov	r17, r15
     83a:	80 81       	ld	r24, Z
     83c:	8e 77       	andi	r24, 0x7E	; 126
     83e:	80 83       	st	Z, r24
     840:	21 15       	cp	r18, r1
     842:	31 05       	cpc	r19, r1
     844:	69 f6       	brne	.-102    	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0x54>
     846:	11 11       	cpse	r17, r1
     848:	cb cf       	rjmp	.-106    	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0x54>
     84a:	0a c0       	rjmp	.+20     	; 0x860 <Endpoint_Write_Control_Stream_LE+0xd4>
     84c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>
     850:	88 23       	and	r24, r24
     852:	99 f0       	breq	.+38     	; 0x87a <Endpoint_Write_Control_Stream_LE+0xee>
     854:	85 30       	cpi	r24, 0x05	; 5
     856:	99 f0       	breq	.+38     	; 0x87e <Endpoint_Write_Control_Stream_LE+0xf2>
     858:	80 81       	ld	r24, Z
     85a:	83 ff       	sbrs	r24, 3
     85c:	03 c0       	rjmp	.+6      	; 0x864 <Endpoint_Write_Control_Stream_LE+0xd8>
     85e:	11 c0       	rjmp	.+34     	; 0x882 <Endpoint_Write_Control_Stream_LE+0xf6>
     860:	e8 ee       	ldi	r30, 0xE8	; 232
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	82 ff       	sbrs	r24, 2
     868:	f1 cf       	rjmp	.-30     	; 0x84c <Endpoint_Write_Control_Stream_LE+0xc0>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0b c0       	rjmp	.+22     	; 0x884 <Endpoint_Write_Control_Stream_LE+0xf8>
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	09 c0       	rjmp	.+18     	; 0x884 <Endpoint_Write_Control_Stream_LE+0xf8>
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	07 c0       	rjmp	.+14     	; 0x884 <Endpoint_Write_Control_Stream_LE+0xf8>
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	05 c0       	rjmp	.+10     	; 0x884 <Endpoint_Write_Control_Stream_LE+0xf8>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	03 c0       	rjmp	.+6      	; 0x884 <Endpoint_Write_Control_Stream_LE+0xf8>
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	01 c0       	rjmp	.+2      	; 0x884 <Endpoint_Write_Control_Stream_LE+0xf8>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	08 95       	ret

00000894 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8a2:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <USB_ControlRequest+0x6>
     8a6:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <USB_ControlRequest+0x7>
     8aa:	26 17       	cp	r18, r22
     8ac:	37 07       	cpc	r19, r23
     8ae:	58 f0       	brcs	.+22     	; 0x8c6 <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8b0:	61 15       	cp	r22, r1
     8b2:	71 05       	cpc	r23, r1
     8b4:	39 f4       	brne	.+14     	; 0x8c4 <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8b6:	e8 ee       	ldi	r30, 0xE8	; 232
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	20 81       	ld	r18, Z
     8bc:	2e 77       	andi	r18, 0x7E	; 126
     8be:	20 83       	st	Z, r18
     8c0:	9b 01       	movw	r18, r22
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <Endpoint_Write_Control_PStream_LE+0x32>
     8c4:	9b 01       	movw	r18, r22
     8c6:	e8 2f       	mov	r30, r24
     8c8:	f9 2f       	mov	r31, r25
     8ca:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8cc:	a8 ee       	ldi	r26, 0xE8	; 232
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     8d0:	63 ef       	ldi	r22, 0xF3	; 243
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	42 ef       	ldi	r20, 0xF2	; 242
     8d6:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8d8:	0f 2e       	mov	r0, r31
     8da:	f1 ef       	ldi	r31, 0xF1	; 241
     8dc:	cf 2e       	mov	r12, r31
     8de:	d1 2c       	mov	r13, r1
     8e0:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     8e2:	01 e0       	ldi	r16, 0x01	; 1
     8e4:	f1 2c       	mov	r15, r1
     8e6:	31 c0       	rjmp	.+98     	; 0x94a <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8e8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8ec:	88 23       	and	r24, r24
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <Endpoint_Write_Control_PStream_LE+0x5e>
     8f0:	43 c0       	rjmp	.+134    	; 0x978 <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8f2:	85 30       	cpi	r24, 0x05	; 5
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <Endpoint_Write_Control_PStream_LE+0x64>
     8f6:	42 c0       	rjmp	.+132    	; 0x97c <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8f8:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8fa:	83 fd       	sbrc	r24, 3
     8fc:	41 c0       	rjmp	.+130    	; 0x980 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8fe:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     900:	82 fd       	sbrc	r24, 2
     902:	33 c0       	rjmp	.+102    	; 0x96a <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     904:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     906:	80 ff       	sbrs	r24, 0
     908:	20 c0       	rjmp	.+64     	; 0x94a <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     90a:	eb 01       	movw	r28, r22
     90c:	18 81       	ld	r17, Y
     90e:	ea 01       	movw	r28, r20
     910:	88 81       	ld	r24, Y
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     916:	21 15       	cp	r18, r1
     918:	31 05       	cpc	r19, r1
     91a:	81 f0       	breq	.+32     	; 0x93c <Endpoint_Write_Control_PStream_LE+0xa8>
     91c:	88 30       	cpi	r24, 0x08	; 8
     91e:	91 05       	cpc	r25, r1
     920:	68 f4       	brcc	.+26     	; 0x93c <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     922:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     924:	e6 01       	movw	r28, r12
     926:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     928:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     92a:	21 50       	subi	r18, 0x01	; 1
     92c:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     92e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	19 f0       	breq	.+6      	; 0x93c <Endpoint_Write_Control_PStream_LE+0xa8>
     936:	88 30       	cpi	r24, 0x08	; 8
     938:	91 05       	cpc	r25, r1
     93a:	99 f7       	brne	.-26     	; 0x922 <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     93c:	10 2f       	mov	r17, r16
     93e:	08 97       	sbiw	r24, 0x08	; 8
     940:	09 f0       	breq	.+2      	; 0x944 <Endpoint_Write_Control_PStream_LE+0xb0>
     942:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     944:	8c 91       	ld	r24, X
     946:	8e 77       	andi	r24, 0x7E	; 126
     948:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     94a:	21 15       	cp	r18, r1
     94c:	31 05       	cpc	r19, r1
     94e:	61 f6       	brne	.-104    	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x54>
     950:	11 11       	cpse	r17, r1
     952:	ca cf       	rjmp	.-108    	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x54>
     954:	0a c0       	rjmp	.+20     	; 0x96a <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     956:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     95a:	88 23       	and	r24, r24
     95c:	99 f0       	breq	.+38     	; 0x984 <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     95e:	85 30       	cpi	r24, 0x05	; 5
     960:	99 f0       	breq	.+38     	; 0x988 <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     962:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     964:	83 ff       	sbrs	r24, 3
     966:	03 c0       	rjmp	.+6      	; 0x96e <Endpoint_Write_Control_PStream_LE+0xda>
     968:	11 c0       	rjmp	.+34     	; 0x98c <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     96a:	e8 ee       	ldi	r30, 0xE8	; 232
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     970:	82 ff       	sbrs	r24, 2
     972:	f1 cf       	rjmp	.-30     	; 0x956 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0b c0       	rjmp	.+22     	; 0x98e <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	09 c0       	rjmp	.+18     	; 0x98e <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	07 c0       	rjmp	.+14     	; 0x98e <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	05 c0       	rjmp	.+10     	; 0x98e <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	03 c0       	rjmp	.+6      	; 0x98e <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	01 c0       	rjmp	.+2      	; 0x98e <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     98c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	08 95       	ret

0000099e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	bf 92       	push	r11
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	87 30       	cpi	r24, 0x07	; 7
     9b6:	70 f1       	brcs	.+92     	; 0xa14 <Endpoint_ConfigureEndpoint_Prv+0x76>
     9b8:	26 c0       	rjmp	.+76     	; 0xa06 <Endpoint_ConfigureEndpoint_Prv+0x68>
     9ba:	29 2f       	mov	r18, r25
     9bc:	2f 70       	andi	r18, 0x0F	; 15
     9be:	e7 01       	movw	r28, r14
     9c0:	28 83       	st	Y, r18
     9c2:	89 17       	cp	r24, r25
     9c4:	31 f0       	breq	.+12     	; 0x9d2 <Endpoint_ConfigureEndpoint_Prv+0x34>
     9c6:	e8 01       	movw	r28, r16
     9c8:	78 81       	ld	r23, Y
     9ca:	20 81       	ld	r18, Z
     9cc:	e4 01       	movw	r28, r8
     9ce:	58 81       	ld	r21, Y
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     9d2:	24 2f       	mov	r18, r20
     9d4:	76 2f       	mov	r23, r22
     9d6:	5b 2d       	mov	r21, r11
     9d8:	21 ff       	sbrs	r18, 1
     9da:	12 c0       	rjmp	.+36     	; 0xa00 <Endpoint_ConfigureEndpoint_Prv+0x62>
     9dc:	3c 91       	ld	r19, X
     9de:	3e 7f       	andi	r19, 0xFE	; 254
     9e0:	3c 93       	st	X, r19
     9e2:	30 81       	ld	r19, Z
     9e4:	3d 7f       	andi	r19, 0xFD	; 253
     9e6:	30 83       	st	Z, r19
     9e8:	3c 91       	ld	r19, X
     9ea:	31 60       	ori	r19, 0x01	; 1
     9ec:	3c 93       	st	X, r19
     9ee:	e8 01       	movw	r28, r16
     9f0:	78 83       	st	Y, r23
     9f2:	20 83       	st	Z, r18
     9f4:	e4 01       	movw	r28, r8
     9f6:	58 83       	st	Y, r21
     9f8:	e6 01       	movw	r28, r12
     9fa:	28 81       	ld	r18, Y
     9fc:	22 23       	and	r18, r18
     9fe:	44 f4       	brge	.+16     	; 0xa10 <Endpoint_ConfigureEndpoint_Prv+0x72>
     a00:	9f 5f       	subi	r25, 0xFF	; 255
     a02:	97 30       	cpi	r25, 0x07	; 7
     a04:	d1 f6       	brne	.-76     	; 0x9ba <Endpoint_ConfigureEndpoint_Prv+0x1c>
     a06:	8f 70       	andi	r24, 0x0F	; 15
     a08:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	21 c0       	rjmp	.+66     	; 0xa52 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	1f c0       	rjmp	.+62     	; 0xa52 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     a14:	98 2f       	mov	r25, r24
     a16:	9f 70       	andi	r25, 0x0F	; 15
     a18:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a1c:	98 2f       	mov	r25, r24
     a1e:	24 2f       	mov	r18, r20
     a20:	76 2f       	mov	r23, r22
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	ab ee       	ldi	r26, 0xEB	; 235
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	ed ee       	ldi	r30, 0xED	; 237
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	0c ee       	ldi	r16, 0xEC	; 236
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	0f 2e       	mov	r0, r31
     a32:	f0 ef       	ldi	r31, 0xF0	; 240
     a34:	8f 2e       	mov	r8, r31
     a36:	91 2c       	mov	r9, r1
     a38:	f0 2d       	mov	r31, r0
     a3a:	0f 2e       	mov	r0, r31
     a3c:	fe ee       	ldi	r31, 0xEE	; 238
     a3e:	cf 2e       	mov	r12, r31
     a40:	d1 2c       	mov	r13, r1
     a42:	f0 2d       	mov	r31, r0
     a44:	0f 2e       	mov	r0, r31
     a46:	f9 ee       	ldi	r31, 0xE9	; 233
     a48:	ef 2e       	mov	r14, r31
     a4a:	f1 2c       	mov	r15, r1
     a4c:	f0 2d       	mov	r31, r0
     a4e:	b1 2c       	mov	r11, r1
     a50:	c3 cf       	rjmp	.-122    	; 0x9d8 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	08 95       	ret

00000a6a <Endpoint_ConfigureEndpointTable>:
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	66 23       	and	r22, r22
     a78:	e9 f1       	breq	.+122    	; 0xaf4 <Endpoint_ConfigureEndpointTable+0x8a>
     a7a:	06 2f       	mov	r16, r22
     a7c:	c8 2f       	mov	r28, r24
     a7e:	d9 2f       	mov	r29, r25
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	0f 2e       	mov	r0, r31
     a84:	f6 e0       	ldi	r31, 0x06	; 6
     a86:	ff 2e       	mov	r15, r31
     a88:	f0 2d       	mov	r31, r0
     a8a:	68 94       	set
     a8c:	ee 24       	eor	r14, r14
     a8e:	e1 f8       	bld	r14, 1
     a90:	58 81       	ld	r21, Y
     a92:	55 23       	and	r21, r21
     a94:	49 f1       	breq	.+82     	; 0xae8 <Endpoint_ConfigureEndpointTable+0x7e>
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	e9 81       	ldd	r30, Y+1	; 0x01
     a9a:	fa 81       	ldd	r31, Y+2	; 0x02
     a9c:	6b 81       	ldd	r22, Y+3	; 0x03
     a9e:	85 2f       	mov	r24, r21
     aa0:	8f 70       	andi	r24, 0x0F	; 15
     aa2:	87 30       	cpi	r24, 0x07	; 7
     aa4:	48 f5       	brcc	.+82     	; 0xaf8 <Endpoint_ConfigureEndpointTable+0x8e>
     aa6:	92 30       	cpi	r25, 0x02	; 2
     aa8:	10 f4       	brcc	.+4      	; 0xaae <Endpoint_ConfigureEndpointTable+0x44>
     aaa:	4e 2d       	mov	r20, r14
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <Endpoint_ConfigureEndpointTable+0x46>
     aae:	4f 2d       	mov	r20, r15
     ab0:	e9 30       	cpi	r30, 0x09	; 9
     ab2:	f1 05       	cpc	r31, r1
     ab4:	50 f0       	brcs	.+20     	; 0xaca <Endpoint_ConfigureEndpointTable+0x60>
     ab6:	28 e0       	ldi	r18, 0x08	; 8
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	9f 5f       	subi	r25, 0xFF	; 255
     abe:	22 0f       	add	r18, r18
     ac0:	33 1f       	adc	r19, r19
     ac2:	2e 17       	cp	r18, r30
     ac4:	3f 07       	cpc	r19, r31
     ac6:	d0 f3       	brcs	.-12     	; 0xabc <Endpoint_ConfigureEndpointTable+0x52>
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <Endpoint_ConfigureEndpointTable+0x62>
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	92 95       	swap	r25
     ace:	90 7f       	andi	r25, 0xF0	; 240
     ad0:	49 2b       	or	r20, r25
     ad2:	90 e4       	ldi	r25, 0x40	; 64
     ad4:	69 9f       	mul	r22, r25
     ad6:	b0 01       	movw	r22, r0
     ad8:	11 24       	eor	r1, r1
     ada:	55 1f       	adc	r21, r21
     adc:	55 27       	eor	r21, r21
     ade:	55 1f       	adc	r21, r21
     ae0:	65 2b       	or	r22, r21
     ae2:	5d df       	rcall	.-326    	; 0x99e <Endpoint_ConfigureEndpoint_Prv>
     ae4:	88 23       	and	r24, r24
     ae6:	49 f0       	breq	.+18     	; 0xafa <Endpoint_ConfigureEndpointTable+0x90>
     ae8:	1f 5f       	subi	r17, 0xFF	; 255
     aea:	25 96       	adiw	r28, 0x05	; 5
     aec:	01 13       	cpse	r16, r17
     aee:	d0 cf       	rjmp	.-96     	; 0xa90 <Endpoint_ConfigureEndpointTable+0x26>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	03 c0       	rjmp	.+6      	; 0xafa <Endpoint_ConfigureEndpointTable+0x90>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	01 c0       	rjmp	.+2      	; 0xafa <Endpoint_ConfigureEndpointTable+0x90>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	08 95       	ret

00000b08 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     b08:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <USB_ControlRequest>
     b0c:	88 23       	and	r24, r24
     b0e:	44 f0       	brlt	.+16     	; 0xb20 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b10:	e8 ee       	ldi	r30, 0xE8	; 232
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	14 c0       	rjmp	.+40     	; 0xb3e <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b16:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>
     b1a:	81 11       	cpse	r24, r1
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <Endpoint_ClearStatusStage+0x1c>
     b1e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b20:	e8 ee       	ldi	r30, 0xE8	; 232
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     b26:	82 ff       	sbrs	r24, 2
     b28:	f6 cf       	rjmp	.-20     	; 0xb16 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b2a:	e8 ee       	ldi	r30, 0xE8	; 232
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	8b 77       	andi	r24, 0x7B	; 123
     b32:	80 83       	st	Z, r24
     b34:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b36:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>
     b3a:	88 23       	and	r24, r24
     b3c:	41 f0       	breq	.+16     	; 0xb4e <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b3e:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     b40:	80 ff       	sbrs	r24, 0
     b42:	f9 cf       	rjmp	.-14     	; 0xb36 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b44:	e8 ee       	ldi	r30, 0xE8	; 232
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	8e 77       	andi	r24, 0x7E	; 126
     b4c:	80 83       	st	Z, r24
     b4e:	08 95       	ret

00000b50 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b58:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     b5c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     b60:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b62:	ac ee       	ldi	r26, 0xEC	; 236
     b64:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b66:	e8 ee       	ldi	r30, 0xE8	; 232
     b68:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b6a:	0b ee       	ldi	r16, 0xEB	; 235
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	44 ee       	ldi	r20, 0xE4	; 228
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <Endpoint_WaitUntilReady+0x26>
     b74:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b76:	9c 91       	ld	r25, X
     b78:	89 2f       	mov	r24, r25
     b7a:	81 70       	andi	r24, 0x01	; 1
     b7c:	90 fd       	sbrc	r25, 0
     b7e:	1d c0       	rjmp	.+58     	; 0xbba <Endpoint_WaitUntilReady+0x6a>
     b80:	20 c0       	rjmp	.+64     	; 0xbc2 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b82:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b86:	88 23       	and	r24, r24
     b88:	81 f0       	breq	.+32     	; 0xbaa <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b8a:	85 30       	cpi	r24, 0x05	; 5
     b8c:	81 f0       	breq	.+32     	; 0xbae <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b8e:	e8 01       	movw	r28, r16
     b90:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b92:	85 fd       	sbrc	r24, 5
     b94:	0e c0       	rjmp	.+28     	; 0xbb2 <Endpoint_WaitUntilReady+0x62>
     b96:	ea 01       	movw	r28, r20
     b98:	88 81       	ld	r24, Y
     b9a:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b9c:	28 17       	cp	r18, r24
     b9e:	39 07       	cpc	r19, r25
     ba0:	51 f3       	breq	.-44     	; 0xb76 <Endpoint_WaitUntilReady+0x26>
     ba2:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ba4:	39 f7       	brne	.-50     	; 0xb74 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     ba6:	84 e0       	ldi	r24, 0x04	; 4
     ba8:	0f c0       	rjmp	.+30     	; 0xbc8 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0d c0       	rjmp	.+26     	; 0xbc8 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	0b c0       	rjmp	.+22     	; 0xbc8 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bba:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     bbc:	80 ff       	sbrs	r24, 0
     bbe:	e1 cf       	rjmp	.-62     	; 0xb82 <Endpoint_WaitUntilReady+0x32>
     bc0:	fa cf       	rjmp	.-12     	; 0xbb6 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bc2:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     bc4:	92 ff       	sbrs	r25, 2
     bc6:	dd cf       	rjmp	.-70     	; 0xb82 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	08 95       	ret

00000bd2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bd8:	df 93       	push	r29
     bda:	4c d0       	rcall	.+152    	; 0xc74 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bdc:	53 d0       	rcall	.+166    	; 0xc84 <USB_INT_ClearAllInterrupts>
     bde:	c8 ed       	ldi	r28, 0xD8	; 216
     be0:	d0 e0       	ldi	r29, 0x00	; 0
     be2:	88 81       	ld	r24, Y
     be4:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
     be6:	88 83       	st	Y, r24
     be8:	88 81       	ld	r24, Y
     bea:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bec:	88 83       	st	Y, r24
     bee:	88 81       	ld	r24, Y
     bf0:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bf2:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     bf4:	19 bc       	out	0x29, r1	; 41
     bf6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     bfa:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     bfe:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     c02:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     c06:	00 ee       	ldi	r16, 0xE0	; 224
     c08:	10 e0       	ldi	r17, 0x00	; 0
     c0a:	f8 01       	movw	r30, r16
     c0c:	80 81       	ld	r24, Z
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     c10:	80 83       	st	Z, r24
     c12:	88 81       	ld	r24, Y
     c14:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c16:	88 83       	st	Y, r24
     c18:	42 e0       	ldi	r20, 0x02	; 2
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c1e:	bf de       	rcall	.-642    	; 0x99e <Endpoint_ConfigureEndpoint_Prv>
     c20:	e1 ee       	ldi	r30, 0xE1	; 225
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c28:	80 83       	st	Z, r24
     c2a:	e2 ee       	ldi	r30, 0xE2	; 226
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     c32:	80 83       	st	Z, r24
     c34:	80 81       	ld	r24, Z
     c36:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c38:	80 83       	st	Z, r24
     c3a:	f8 01       	movw	r30, r16
     c3c:	80 81       	ld	r24, Z
     c3e:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c40:	80 83       	st	Z, r24
     c42:	88 81       	ld	r24, Y
     c44:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c46:	88 83       	st	Y, r24
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c52:	e8 ed       	ldi	r30, 0xD8	; 216
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8f 7e       	andi	r24, 0xEF	; 239
     c5a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c5c:	e7 ed       	ldi	r30, 0xD7	; 215
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <USB_IsInitialized>

	USB_ResetInterface();
     c70:	b0 cf       	rjmp	.-160    	; 0xbd2 <USB_ResetInterface>
     c72:	08 95       	ret

00000c74 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     c74:	e8 ed       	ldi	r30, 0xD8	; 216
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8e 7f       	andi	r24, 0xFE	; 254
     c7c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     c7e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c82:	08 95       	ret

00000c84 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c84:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     c88:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     c8c:	08 95       	ret

00000c8e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     cb0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     cb4:	82 ff       	sbrs	r24, 2
     cb6:	0a c0       	rjmp	.+20     	; 0xccc <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     cb8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cbc:	82 ff       	sbrs	r24, 2
     cbe:	06 c0       	rjmp	.+12     	; 0xccc <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     cc0:	e1 ee       	ldi	r30, 0xE1	; 225
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8b 7f       	andi	r24, 0xFB	; 251
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     cc8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     cca:	66 d2       	rcall	.+1228   	; 0x1198 <USB_Event_Stub>
     ccc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     cd0:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     cd2:	1d c0       	rjmp	.+58     	; 0xd0e <__vector_10+0x80>
     cd4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     cd8:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     cda:	19 c0       	rjmp	.+50     	; 0xd0e <__vector_10+0x80>
     cdc:	ea ed       	ldi	r30, 0xDA	; 218
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8e 7f       	andi	r24, 0xFE	; 254
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     ce4:	80 83       	st	Z, r24
     ce6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     cea:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cec:	0c c0       	rjmp	.+24     	; 0xd06 <__vector_10+0x78>
     cee:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cf0:	89 bd       	out	0x29, r24	; 41
     cf2:	82 e1       	ldi	r24, 0x12	; 18
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     cf4:	89 bd       	out	0x29, r24	; 41
     cf6:	09 b4       	in	r0, 0x29	; 41
     cf8:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <__vector_10+0x68>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
     cfe:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
     d02:	c4 d2       	rcall	.+1416   	; 0x128c <EVENT_USB_Device_Connect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <__vector_10+0x80>
			EVENT_USB_Device_Disconnect();
     d06:	19 bc       	out	0x29, r1	; 41
     d08:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <USB_DeviceState>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d0c:	c0 d2       	rcall	.+1408   	; 0x128e <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d0e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     d12:	80 ff       	sbrs	r24, 0
     d14:	16 c0       	rjmp	.+44     	; 0xd42 <__vector_10+0xb4>
     d16:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d1a:	80 ff       	sbrs	r24, 0
     d1c:	12 c0       	rjmp	.+36     	; 0xd42 <__vector_10+0xb4>
     d1e:	e2 ee       	ldi	r30, 0xE2	; 226
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	80 83       	st	Z, r24
     d28:	80 81       	ld	r24, Z
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     d2a:	80 61       	ori	r24, 0x10	; 16
     d2c:	80 83       	st	Z, r24
     d2e:	e8 ed       	ldi	r30, 0xD8	; 216
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     d34:	80 62       	ori	r24, 0x20	; 32
     d36:	80 83       	st	Z, r24
		EVENT_USB_Device_Suspend();
     d38:	19 bc       	out	0x29, r1	; 41
     d3a:	85 e0       	ldi	r24, 0x05	; 5
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     d3c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     d40:	2b d2       	rcall	.+1110   	; 0x1198 <USB_Event_Stub>
     d42:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     d46:	84 ff       	sbrs	r24, 4
     d48:	2f c0       	rjmp	.+94     	; 0xda8 <__vector_10+0x11a>
     d4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d4e:	84 ff       	sbrs	r24, 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d50:	2b c0       	rjmp	.+86     	; 0xda8 <__vector_10+0x11a>
     d52:	80 e1       	ldi	r24, 0x10	; 16
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d54:	89 bd       	out	0x29, r24	; 41
     d56:	82 e1       	ldi	r24, 0x12	; 18
     d58:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d5a:	09 b4       	in	r0, 0x29	; 41
     d5c:	00 fe       	sbrs	r0, 0
     d5e:	fd cf       	rjmp	.-6      	; 0xd5a <__vector_10+0xcc>
     d60:	e8 ed       	ldi	r30, 0xD8	; 216
     d62:	f0 e0       	ldi	r31, 0x00	; 0
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     d64:	80 81       	ld	r24, Z
     d66:	8f 7d       	andi	r24, 0xDF	; 223
     d68:	80 83       	st	Z, r24
     d6a:	e1 ee       	ldi	r30, 0xE1	; 225
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7e       	andi	r24, 0xEF	; 239
     d72:	80 83       	st	Z, r24
     d74:	e2 ee       	ldi	r30, 0xE2	; 226
     d76:	f0 e0       	ldi	r31, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d78:	80 81       	ld	r24, Z
     d7a:	8f 7e       	andi	r24, 0xEF	; 239
     d7c:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     d7e:	80 81       	ld	r24, Z
     d80:	81 60       	ori	r24, 0x01	; 1
     d82:	80 83       	st	Z, r24
     d84:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
     d88:	88 23       	and	r24, r24
     d8a:	21 f0       	breq	.+8      	; 0xd94 <__vector_10+0x106>
     d8c:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d8e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <__vector_10+0x118>
     d94:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     d98:	88 23       	and	r24, r24
     d9a:	14 f0       	brlt	.+4      	; 0xda0 <__vector_10+0x112>
     d9c:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <__vector_10+0x114>
     da0:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     da2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     da6:	f8 d1       	rcall	.+1008   	; 0x1198 <USB_Event_Stub>
     da8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     dac:	83 ff       	sbrs	r24, 3
     dae:	23 c0       	rjmp	.+70     	; 0xdf6 <__vector_10+0x168>
     db0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     db4:	83 ff       	sbrs	r24, 3
     db6:	1f c0       	rjmp	.+62     	; 0xdf6 <__vector_10+0x168>
     db8:	e1 ee       	ldi	r30, 0xE1	; 225
     dba:	f0 e0       	ldi	r31, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     dbc:	80 81       	ld	r24, Z
     dbe:	87 7f       	andi	r24, 0xF7	; 247
     dc0:	80 83       	st	Z, r24
		USB_Device_ConfigurationNumber = 0;
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     dc8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     dcc:	80 81       	ld	r24, Z
     dce:	8e 7f       	andi	r24, 0xFE	; 254
     dd0:	80 83       	st	Z, r24
     dd2:	e2 ee       	ldi	r30, 0xE2	; 226
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     dd6:	80 81       	ld	r24, Z
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     dda:	80 83       	st	Z, r24
     ddc:	80 81       	ld	r24, Z
     dde:	80 61       	ori	r24, 0x10	; 16
     de0:	80 83       	st	Z, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     de2:	42 e0       	ldi	r20, 0x02	; 2
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	da dd       	rcall	.-1100   	; 0x99e <Endpoint_ConfigureEndpoint_Prv>
     dea:	e0 ef       	ldi	r30, 0xF0	; 240

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     df0:	88 60       	ori	r24, 0x08	; 8
     df2:	80 83       	st	Z, r24
     df4:	d1 d1       	rcall	.+930    	; 0x1198 <USB_Event_Stub>
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e46:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     e4a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e4c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     e50:	d8 2f       	mov	r29, r24
     e52:	d1 70       	andi	r29, 0x01	; 1
     e54:	80 fd       	sbrc	r24, 0
     e56:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e58:	0f 2e       	mov	r0, r31
     e5a:	f9 ee       	ldi	r31, 0xE9	; 233
     e5c:	ef 2e       	mov	r14, r31
     e5e:	f1 2c       	mov	r15, r1
     e60:	f0 2d       	mov	r31, r0
     e62:	f7 01       	movw	r30, r14
     e64:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     e66:	00 ef       	ldi	r16, 0xF0	; 240
     e68:	10 e0       	ldi	r17, 0x00	; 0
     e6a:	f8 01       	movw	r30, r16
     e6c:	80 81       	ld	r24, Z
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	80 83       	st	Z, r24
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     e72:	78 94       	sei
     e74:	21 d0       	rcall	.+66     	; 0xeb8 <USB_Device_ProcessControlRequest>
     e76:	f7 01       	movw	r30, r14
     e78:	10 82       	st	Z, r1
     e7a:	f8 01       	movw	r30, r16
     e7c:	80 81       	ld	r24, Z
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	80 83       	st	Z, r24
     e82:	cd 2b       	or	r28, r29
     e84:	cf 70       	andi	r28, 0x0F	; 15
     e86:	f7 01       	movw	r30, r14
     e88:	c0 83       	st	Z, r28
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	aa 97       	sbiw	r28, 0x2a	; 42
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	eb e4       	ldi	r30, 0x4B	; 75
     ed2:	f1 e0       	ldi	r31, 0x01	; 1
     ed4:	23 e5       	ldi	r18, 0x53	; 83
     ed6:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ed8:	a1 ef       	ldi	r26, 0xF1	; 241
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ede:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ee0:	2e 17       	cp	r18, r30
     ee2:	3f 07       	cpc	r19, r31
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     ee4:	d9 f7       	brne	.-10     	; 0xedc <USB_Device_ProcessControlRequest+0x24>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ee6:	d8 d1       	rcall	.+944    	; 0x1298 <EVENT_USB_Device_ControlRequest>
     ee8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     eec:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     eee:	2f c1       	rjmp	.+606    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
     ef0:	eb e4       	ldi	r30, 0x4B	; 75
     ef2:	f1 e0       	ldi	r31, 0x01	; 1

		switch (USB_ControlRequest.bRequest)
     ef4:	90 81       	ld	r25, Z
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	85 30       	cpi	r24, 0x05	; 5
     efa:	09 f4       	brne	.+2      	; 0xefe <USB_Device_ProcessControlRequest+0x46>
     efc:	79 c0       	rjmp	.+242    	; 0xff0 <USB_Device_ProcessControlRequest+0x138>
     efe:	30 f4       	brcc	.+12     	; 0xf0c <USB_Device_ProcessControlRequest+0x54>
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	b1 f1       	breq	.+108    	; 0xf70 <USB_Device_ProcessControlRequest+0xb8>
     f04:	68 f0       	brcs	.+26     	; 0xf20 <USB_Device_ProcessControlRequest+0x68>
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	99 f1       	breq	.+102    	; 0xf70 <USB_Device_ProcessControlRequest+0xb8>
     f0a:	21 c1       	rjmp	.+578    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	09 f4       	brne	.+2      	; 0xf12 <USB_Device_ProcessControlRequest+0x5a>
     f10:	e9 c0       	rjmp	.+466    	; 0x10e4 <USB_Device_ProcessControlRequest+0x22c>
     f12:	89 30       	cpi	r24, 0x09	; 9
     f14:	09 f4       	brne	.+2      	; 0xf18 <USB_Device_ProcessControlRequest+0x60>
     f16:	f6 c0       	rjmp	.+492    	; 0x1104 <USB_Device_ProcessControlRequest+0x24c>
     f18:	86 30       	cpi	r24, 0x06	; 6
     f1a:	09 f0       	breq	.+2      	; 0xf1e <USB_Device_ProcessControlRequest+0x66>
     f1c:	18 c1       	rjmp	.+560    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f1e:	8b c0       	rjmp	.+278    	; 0x1036 <USB_Device_ProcessControlRequest+0x17e>
     f20:	90 38       	cpi	r25, 0x80	; 128
     f22:	21 f0       	breq	.+8      	; 0xf2c <USB_Device_ProcessControlRequest+0x74>
     f24:	92 38       	cpi	r25, 0x82	; 130
     f26:	09 f0       	breq	.+2      	; 0xf2a <USB_Device_ProcessControlRequest+0x72>
     f28:	12 c1       	rjmp	.+548    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <USB_Device_ProcessControlRequest+0x84>
     f2c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     f30:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <USB_Device_RemoteWakeupEnabled>
     f34:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     f36:	71 f0       	breq	.+28     	; 0xf54 <USB_Device_ProcessControlRequest+0x9c>
     f38:	82 60       	ori	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f3a:	0c c0       	rjmp	.+24     	; 0xf54 <USB_Device_ProcessControlRequest+0x9c>
     f3c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <USB_ControlRequest+0x4>
     f40:	8f 70       	andi	r24, 0x0F	; 15
     f42:	e9 ee       	ldi	r30, 0xE9	; 233
     f44:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f46:	80 83       	st	Z, r24
     f48:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     f4c:	85 fb       	bst	r24, 5
     f4e:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f50:	80 f9       	bld	r24, 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f52:	10 82       	st	Z, r1
     f54:	e8 ee       	ldi	r30, 0xE8	; 232
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	90 81       	ld	r25, Z
     f5a:	97 7f       	andi	r25, 0xF7	; 247
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f5c:	90 83       	st	Z, r25
     f5e:	a1 ef       	ldi	r26, 0xF1	; 241
     f60:	b0 e0       	ldi	r27, 0x00	; 0
				UEDATX = (Data >> 8);
     f62:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f64:	1c 92       	st	X, r1
     f66:	80 81       	ld	r24, Z
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f68:	8e 77       	andi	r24, 0x7E	; 126
     f6a:	80 83       	st	Z, r24
     f6c:	cd dd       	rcall	.-1126   	; 0xb08 <Endpoint_ClearStatusStage>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f6e:	ef c0       	rjmp	.+478    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
     f70:	99 23       	and	r25, r25
     f72:	09 f4       	brne	.+2      	; 0xf76 <USB_Device_ProcessControlRequest+0xbe>
     f74:	fb c0       	rjmp	.+502    	; 0x116c <USB_Device_ProcessControlRequest+0x2b4>
     f76:	92 30       	cpi	r25, 0x02	; 2
     f78:	09 f0       	breq	.+2      	; 0xf7c <USB_Device_ProcessControlRequest+0xc4>
     f7a:	e9 c0       	rjmp	.+466    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     f7c:	fc c0       	rjmp	.+504    	; 0x1176 <USB_Device_ProcessControlRequest+0x2be>
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	09 f0       	breq	.+2      	; 0xf86 <USB_Device_ProcessControlRequest+0xce>
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <USB_Device_RemoteWakeupEnabled>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     f8a:	29 c0       	rjmp	.+82     	; 0xfde <USB_Device_ProcessControlRequest+0x126>
     f8c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     f90:	8f 70       	andi	r24, 0x0F	; 15
     f92:	09 f4       	brne	.+2      	; 0xf96 <USB_Device_ProcessControlRequest+0xde>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f94:	dc c0       	rjmp	.+440    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
     f96:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     f9a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     f9e:	90 ff       	sbrs	r25, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     fa0:	1e c0       	rjmp	.+60     	; 0xfde <USB_Device_ProcessControlRequest+0x126>
     fa2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <USB_ControlRequest+0x1>
     fa6:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fa8:	31 f4       	brne	.+12     	; 0xfb6 <USB_Device_ProcessControlRequest+0xfe>
     faa:	eb ee       	ldi	r30, 0xEB	; 235
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 62       	ori	r24, 0x20	; 32
     fb2:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     fb4:	14 c0       	rjmp	.+40     	; 0xfde <USB_Device_ProcessControlRequest+0x126>
     fb6:	eb ee       	ldi	r30, 0xEB	; 235
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	90 81       	ld	r25, Z
     fbc:	90 61       	ori	r25, 0x10	; 16
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     fbe:	90 83       	st	Z, r25
     fc0:	21 e0       	ldi	r18, 0x01	; 1
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	a9 01       	movw	r20, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <USB_Device_ProcessControlRequest+0x114>
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	8a 95       	dec	r24
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <USB_Device_ProcessControlRequest+0x110>
     fd0:	aa ee       	ldi	r26, 0xEA	; 234
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
				UERST = 0;
     fd4:	4c 93       	st	X, r20

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     fd6:	1c 92       	st	X, r1
     fd8:	80 81       	ld	r24, Z
     fda:	88 60       	ori	r24, 0x08	; 8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fdc:	80 83       	st	Z, r24
     fde:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe2:	e8 ee       	ldi	r30, 0xE8	; 232
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     fe8:	87 7f       	andi	r24, 0xF7	; 247
     fea:	80 83       	st	Z, r24
     fec:	8d dd       	rcall	.-1254   	; 0xb08 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fee:	af c0       	rjmp	.+350    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
     ff0:	91 11       	cpse	r25, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ff2:	ad c0       	rjmp	.+346    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
     ff4:	10 91 4d 01 	lds	r17, 0x014D	; 0x80014d <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ff8:	1f 77       	andi	r17, 0x7F	; 127
     ffa:	e3 ee       	ldi	r30, 0xE3	; 227
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 78       	andi	r24, 0x80	; 128
    1002:	81 2b       	or	r24, r17
    1004:	80 83       	st	Z, r24
    1006:	e8 ee       	ldi	r30, 0xE8	; 232
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    100c:	87 7f       	andi	r24, 0xF7	; 247
    100e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1010:	7b dd       	rcall	.-1290   	; 0xb08 <Endpoint_ClearStatusStage>
    1012:	e8 ee       	ldi	r30, 0xE8	; 232
    1014:	f0 e0       	ldi	r31, 0x00	; 0

	while (!(Endpoint_IsINReady()));
    1016:	80 81       	ld	r24, Z
    1018:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <USB_Device_ProcessControlRequest+0x15e>
    101c:	e3 ee       	ldi	r30, 0xE3	; 227
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 68       	ori	r24, 0x80	; 128

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1024:	80 83       	st	Z, r24
    1026:	11 11       	cpse	r17, r1
    1028:	02 c0       	rjmp	.+4      	; 0x102e <USB_Device_ProcessControlRequest+0x176>
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <USB_Device_ProcessControlRequest+0x178>
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1034:	8c c0       	rjmp	.+280    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    1036:	90 58       	subi	r25, 0x80	; 128
    1038:	92 30       	cpi	r25, 0x02	; 2
    103a:	08 f0       	brcs	.+2      	; 0x103e <USB_Device_ProcessControlRequest+0x186>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    103c:	88 c0       	rjmp	.+272    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    103e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x2>
    1042:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <USB_ControlRequest+0x3>
    1046:	8c 3d       	cpi	r24, 0xDC	; 220
    1048:	53 e0       	ldi	r21, 0x03	; 3
    104a:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    104c:	99 f5       	brne	.+102    	; 0x10b4 <USB_Device_ProcessControlRequest+0x1fc>
    104e:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1050:	8a 83       	std	Y+2, r24	; 0x02
    1052:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1054:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1056:	5f b7       	in	r21, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1058:	f8 94       	cli
    105a:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    105c:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    105e:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1060:	3e e0       	ldi	r19, 0x0E	; 14
    1062:	41 e2       	ldi	r20, 0x21	; 33
    1064:	e3 2f       	mov	r30, r19
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
    106c:	84 91       	lpm	r24, Z
    106e:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <USB_Device_ProcessControlRequest+0x1c0>
    1072:	82 95       	swap	r24
						SigReadAddress++;
    1074:	8f 70       	andi	r24, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    1076:	3f 5f       	subi	r19, 0xFF	; 255

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	8a 30       	cpi	r24, 0x0A	; 10
    107c:	18 f0       	brcs	.+6      	; 0x1084 <USB_Device_ProcessControlRequest+0x1cc>
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	c7 96       	adiw	r24, 0x37	; 55
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <USB_Device_ProcessControlRequest+0x1d0>
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	c0 96       	adiw	r24, 0x30	; 48
    1088:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    108a:	9d 93       	st	X+, r25
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1090:	49 f7       	brne	.-46     	; 0x1064 <USB_Device_ProcessControlRequest+0x1ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1092:	5f bf       	out	0x3f, r21	; 63
    1094:	08 ee       	ldi	r16, 0xE8	; 232
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	f8 01       	movw	r30, r16
    109a:	80 81       	ld	r24, Z

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    109c:	87 7f       	andi	r24, 0xF7	; 247
    109e:	80 83       	st	Z, r24
    10a0:	6a e2       	ldi	r22, 0x2A	; 42
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	ce 01       	movw	r24, r28
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	71 db       	rcall	.-2334   	; 0x78c <Endpoint_Write_Control_Stream_LE>
    10aa:	f8 01       	movw	r30, r16
    10ac:	80 81       	ld	r24, Z
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    10ae:	8b 77       	andi	r24, 0x7B	; 123
    10b0:	80 83       	st	Z, r24
    10b2:	4d c0       	rjmp	.+154    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    10b4:	ae 01       	movw	r20, r28
    10b6:	4f 5f       	subi	r20, 0xFF	; 255
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ba:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <USB_ControlRequest+0x4>
    10be:	5a d8       	rcall	.-3916   	; 0x174 <CALLBACK_USB_GetDescriptor>
    10c0:	bc 01       	movw	r22, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10c2:	89 2b       	or	r24, r25
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <USB_Device_ProcessControlRequest+0x210>
    10c6:	43 c0       	rjmp	.+134    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    10c8:	08 ee       	ldi	r16, 0xE8	; 232
    10ca:	10 e0       	ldi	r17, 0x00	; 0
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    10cc:	f8 01       	movw	r30, r16
    10ce:	90 81       	ld	r25, Z
    10d0:	97 7f       	andi	r25, 0xF7	; 247
    10d2:	90 83       	st	Z, r25
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	dd db       	rcall	.-2118   	; 0x894 <Endpoint_Write_Control_PStream_LE>
    10da:	f8 01       	movw	r30, r16
    10dc:	80 81       	ld	r24, Z
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    10de:	8b 77       	andi	r24, 0x7B	; 123
    10e0:	80 83       	st	Z, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10e2:	35 c0       	rjmp	.+106    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    10e4:	90 38       	cpi	r25, 0x80	; 128
    10e6:	99 f5       	brne	.+102    	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    10e8:	e8 ee       	ldi	r30, 0xE8	; 232

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10ec:	80 81       	ld	r24, Z
    10ee:	87 7f       	andi	r24, 0xF7	; 247
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10f0:	80 83       	st	Z, r24
    10f2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <USB_Device_ConfigurationNumber>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    10f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    10fa:	80 81       	ld	r24, Z
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    10fc:	8e 77       	andi	r24, 0x7E	; 126
    10fe:	80 83       	st	Z, r24
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1100:	03 dd       	rcall	.-1530   	; 0xb08 <Endpoint_ClearStatusStage>
    1102:	25 c0       	rjmp	.+74     	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    1104:	91 11       	cpse	r25, r1
    1106:	23 c0       	rjmp	.+70     	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    1108:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x2>
    110c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <USB_ControlRequest+0x3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1110:	99 27       	eor	r25, r25
    1112:	02 97       	sbiw	r24, 0x02	; 2
    1114:	e4 f4       	brge	.+56     	; 0x114e <USB_Device_ProcessControlRequest+0x296>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1116:	e8 ee       	ldi	r30, 0xE8	; 232
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_ClearStatusStage();
    111e:	80 83       	st	Z, r24
    1120:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x2>

	if (USB_Device_ConfigurationNumber)
    1124:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <USB_Device_ConfigurationNumber>
    1128:	ef dc       	rcall	.-1570   	; 0xb08 <Endpoint_ClearStatusStage>
	  USB_DeviceState = DEVICE_STATE_Configured;
    112a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <USB_Device_ConfigurationNumber>
    112e:	88 23       	and	r24, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1130:	21 f0       	breq	.+8      	; 0x113a <USB_Device_ProcessControlRequest+0x282>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
    1138:	09 c0       	rjmp	.+18     	; 0x114c <USB_Device_ProcessControlRequest+0x294>
    113a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    113e:	88 23       	and	r24, r24

	EVENT_USB_Device_ConfigurationChanged();
    1140:	14 f0       	brlt	.+4      	; 0x1146 <USB_Device_ProcessControlRequest+0x28e>
    1142:	81 e0       	ldi	r24, 0x01	; 1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <USB_Device_ProcessControlRequest+0x290>
    1146:	84 e0       	ldi	r24, 0x04	; 4
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1148:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <USB_DeviceState>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    114c:	a1 d0       	rcall	.+322    	; 0x1290 <EVENT_USB_Device_ConfigurationChanged>
    114e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1152:	83 ff       	sbrs	r24, 3
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <USB_Device_ProcessControlRequest+0x2ca>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1156:	e8 ee       	ldi	r30, 0xE8	; 232
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1160:	eb ee       	ldi	r30, 0xEB	; 235
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 62       	ori	r24, 0x20	; 32
    1168:	80 83       	st	Z, r24
    116a:	0b c0       	rjmp	.+22     	; 0x1182 <USB_Device_ProcessControlRequest+0x2ca>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    116c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <USB_ControlRequest+0x2>
    1170:	91 30       	cpi	r25, 0x01	; 1
    1172:	69 f7       	brne	.-38     	; 0x114e <USB_Device_ProcessControlRequest+0x296>
    1174:	04 cf       	rjmp	.-504    	; 0xf7e <USB_Device_ProcessControlRequest+0xc6>
    1176:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x2>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    117a:	88 23       	and	r24, r24
    117c:	09 f4       	brne	.+2      	; 0x1180 <USB_Device_ProcessControlRequest+0x2c8>
    117e:	06 cf       	rjmp	.-500    	; 0xf8c <USB_Device_ProcessControlRequest+0xd4>
    1180:	2e cf       	rjmp	.-420    	; 0xfde <USB_Device_ProcessControlRequest+0x126>
    1182:	aa 96       	adiw	r28, 0x2a	; 42
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1198:	08 95       	ret

0000119a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    119a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    119c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_DeviceState>
    11a0:	88 23       	and	r24, r24
    11a2:	99 f0       	breq	.+38     	; 0x11ca <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11a4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11a8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11aa:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    11ae:	98 2f       	mov	r25, r24
    11b0:	91 70       	andi	r25, 0x01	; 1
    11b2:	80 fd       	sbrc	r24, 0
    11b4:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11b6:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    11c0:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11c2:	7a de       	rcall	.-780    	; 0xeb8 <USB_Device_ProcessControlRequest>
    11c4:	cf 70       	andi	r28, 0x0F	; 15
    11c6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
    11ce:	84 b7       	in	r24, 0x34	; 52
    11d0:	87 7f       	andi	r24, 0xF7	; 247
    11d2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	a8 95       	wdr
    11da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11de:	88 61       	ori	r24, 0x18	; 24
    11e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11e8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	80 e8       	ldi	r24, 0x80	; 128
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    11f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

  /* Disable clock division */
  clock_prescale_set(clock_div_1);

  /* Hardware Initialization */
  USB_Init();
    11fa:	0f be       	out	0x3f, r0	; 63
  EncoderInit();
    11fc:	2a dd       	rcall	.-1452   	; 0xc52 <USB_Init>
    11fe:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <EncoderInit>
    1202:	08 95       	ret

00001204 <SendSerial>:
}

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change. */
void SendSerial(void)
{
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	ec 97       	sbiw	r28, 0x3c	; 60
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
  char*       ReportString[30];
  sprintf(ReportString, "Left: %i, Right: %i", EncoderGetLeftDelta(), EncoderGetRightDelta());
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	0e d9       	rcall	.-3556   	; 0x43a <EncoderGetRightDelta>
    121e:	18 2f       	mov	r17, r24
    1220:	09 2f       	mov	r16, r25
    1222:	02 d9       	rcall	.-3580   	; 0x428 <EncoderGetLeftDelta>
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	9f 93       	push	r25
    122a:	8f 93       	push	r24
    122c:	8b e1       	ldi	r24, 0x1B	; 27
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	9f 93       	push	r25
    1232:	8f 93       	push	r24
    1234:	8e 01       	movw	r16, r28
    1236:	0f 5f       	subi	r16, 0xFF	; 255
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	1f 93       	push	r17

  /* Write the string to the virtual COM port via the created character stream */
  fputs(ReportString, &USBSerialStream);
    123c:	0f 93       	push	r16
    123e:	5a d0       	rcall	.+180    	; 0x12f4 <sprintf>
    1240:	68 e3       	ldi	r22, 0x38	; 56
    1242:	71 e0       	ldi	r23, 0x01	; 1

  /* Alternatively, without the stream: */
  // CDC_Device_SendString(&VirtualSerial_CDC_Interface, ReportString);
}
    1244:	c8 01       	movw	r24, r16
    1246:	2d d0       	rcall	.+90     	; 0x12a2 <fputs>
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	ec 96       	adiw	r28, 0x3c	; 60
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <main>:
    1268:	b2 df       	rcall	.-156    	; 0x11ce <SetupHardware>
    126a:	68 e3       	ldi	r22, 0x38	; 56
    126c:	71 e0       	ldi	r23, 0x01	; 1
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	d8 d9       	rcall	.-3152   	; 0x624 <CDC_Device_CreateStream>
    1274:	78 94       	sei
    1276:	0e 94 0e 01 	call	0x21c	; 0x21c <EncoderUpdate>
    127a:	c4 df       	rcall	.-120    	; 0x1204 <SendSerial>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	89 d9       	rcall	.-3310   	; 0x594 <CDC_Device_ReceiveByte>
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	6e d9       	rcall	.-3364   	; 0x564 <CDC_Device_USBTask>
    1288:	88 df       	rcall	.-240    	; 0x119a <USB_USBTask>
    128a:	f5 cf       	rjmp	.-22     	; 0x1276 <main+0xe>

0000128c <EVENT_USB_Device_Connect>:
    128c:	08 95       	ret

0000128e <EVENT_USB_Device_Disconnect>:
    128e:	08 95       	ret

00001290 <EVENT_USB_Device_ConfigurationChanged>:
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	db c8       	rjmp	.-3658   	; 0x44c <CDC_Device_ConfigureEndpoints>
    1296:	08 95       	ret

00001298 <EVENT_USB_Device_ControlRequest>:
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	d7 c9       	rjmp	.-3154   	; 0x64c <CDC_Device_ProcessControlRequest>
    129e:	08 95       	ret

000012a0 <EVENT_CDC_Device_ControLineStateChanged>:
    12a0:	08 95       	ret

000012a2 <fputs>:
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	db 01       	movw	r26, r22
    12b0:	13 96       	adiw	r26, 0x03	; 3
    12b2:	2c 91       	ld	r18, X
    12b4:	21 ff       	sbrs	r18, 1
    12b6:	18 c0       	rjmp	.+48     	; 0x12e8 <fputs+0x46>
    12b8:	8b 01       	movw	r16, r22
    12ba:	7c 01       	movw	r14, r24
    12bc:	d0 e0       	ldi	r29, 0x00	; 0
    12be:	c0 e0       	ldi	r28, 0x00	; 0
    12c0:	f7 01       	movw	r30, r14
    12c2:	81 91       	ld	r24, Z+
    12c4:	7f 01       	movw	r14, r30
    12c6:	88 23       	and	r24, r24
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <fputs+0x40>
    12ca:	d8 01       	movw	r26, r16
    12cc:	18 96       	adiw	r26, 0x08	; 8
    12ce:	ed 91       	ld	r30, X+
    12d0:	fc 91       	ld	r31, X
    12d2:	19 97       	sbiw	r26, 0x09	; 9
    12d4:	b8 01       	movw	r22, r16
    12d6:	09 95       	icall
    12d8:	89 2b       	or	r24, r25
    12da:	91 f3       	breq	.-28     	; 0x12c0 <fputs+0x1e>
    12dc:	df ef       	ldi	r29, 0xFF	; 255
    12de:	cf ef       	ldi	r28, 0xFF	; 255
    12e0:	ef cf       	rjmp	.-34     	; 0x12c0 <fputs+0x1e>
    12e2:	8d 2f       	mov	r24, r29
    12e4:	9c 2f       	mov	r25, r28
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <fputs+0x4a>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	e6 e0       	ldi	r30, 0x06	; 6
    12f2:	c9 c2       	rjmp	.+1426   	; 0x1886 <__epilogue_restores__+0x18>

000012f4 <sprintf>:
    12f4:	ae e0       	ldi	r26, 0x0E	; 14
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ef e7       	ldi	r30, 0x7F	; 127
    12fa:	f9 e0       	ldi	r31, 0x09	; 9
    12fc:	aa c2       	rjmp	.+1364   	; 0x1852 <__prologue_saves__+0x1c>
    12fe:	0d 89       	ldd	r16, Y+21	; 0x15
    1300:	1e 89       	ldd	r17, Y+22	; 0x16
    1302:	86 e0       	ldi	r24, 0x06	; 6
    1304:	8c 83       	std	Y+4, r24	; 0x04
    1306:	1a 83       	std	Y+2, r17	; 0x02
    1308:	09 83       	std	Y+1, r16	; 0x01
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	9f e7       	ldi	r25, 0x7F	; 127
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	ae 01       	movw	r20, r28
    1314:	47 5e       	subi	r20, 0xE7	; 231
    1316:	5f 4f       	sbci	r21, 0xFF	; 255
    1318:	6f 89       	ldd	r22, Y+23	; 0x17
    131a:	78 8d       	ldd	r23, Y+24	; 0x18
    131c:	ce 01       	movw	r24, r28
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	08 d0       	rcall	.+16     	; 0x1332 <vfprintf>
    1322:	ef 81       	ldd	r30, Y+7	; 0x07
    1324:	f8 85       	ldd	r31, Y+8	; 0x08
    1326:	e0 0f       	add	r30, r16
    1328:	f1 1f       	adc	r31, r17
    132a:	10 82       	st	Z, r1
    132c:	2e 96       	adiw	r28, 0x0e	; 14
    132e:	e4 e0       	ldi	r30, 0x04	; 4
    1330:	ac c2       	rjmp	.+1368   	; 0x188a <__epilogue_restores__+0x1c>

00001332 <vfprintf>:
    1332:	ab e0       	ldi	r26, 0x0B	; 11
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ee e9       	ldi	r30, 0x9E	; 158
    1338:	f9 e0       	ldi	r31, 0x09	; 9
    133a:	7d c2       	rjmp	.+1274   	; 0x1836 <__prologue_saves__>
    133c:	6c 01       	movw	r12, r24
    133e:	7b 01       	movw	r14, r22
    1340:	8a 01       	movw	r16, r20
    1342:	fc 01       	movw	r30, r24
    1344:	17 82       	std	Z+7, r1	; 0x07
    1346:	16 82       	std	Z+6, r1	; 0x06
    1348:	83 81       	ldd	r24, Z+3	; 0x03
    134a:	81 ff       	sbrs	r24, 1
    134c:	bf c1       	rjmp	.+894    	; 0x16cc <vfprintf+0x39a>
    134e:	ce 01       	movw	r24, r28
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	3c 01       	movw	r6, r24
    1354:	f6 01       	movw	r30, r12
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	f7 01       	movw	r30, r14
    135a:	93 fd       	sbrc	r25, 3
    135c:	85 91       	lpm	r24, Z+
    135e:	93 ff       	sbrs	r25, 3
    1360:	81 91       	ld	r24, Z+
    1362:	7f 01       	movw	r14, r30
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <vfprintf+0x38>
    1368:	ad c1       	rjmp	.+858    	; 0x16c4 <vfprintf+0x392>
    136a:	85 32       	cpi	r24, 0x25	; 37
    136c:	39 f4       	brne	.+14     	; 0x137c <vfprintf+0x4a>
    136e:	93 fd       	sbrc	r25, 3
    1370:	85 91       	lpm	r24, Z+
    1372:	93 ff       	sbrs	r25, 3
    1374:	81 91       	ld	r24, Z+
    1376:	7f 01       	movw	r14, r30
    1378:	85 32       	cpi	r24, 0x25	; 37
    137a:	21 f4       	brne	.+8      	; 0x1384 <vfprintf+0x52>
    137c:	b6 01       	movw	r22, r12
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	c0 d1       	rcall	.+896    	; 0x1702 <fputc>
    1382:	e8 cf       	rjmp	.-48     	; 0x1354 <vfprintf+0x22>
    1384:	91 2c       	mov	r9, r1
    1386:	21 2c       	mov	r2, r1
    1388:	31 2c       	mov	r3, r1
    138a:	ff e1       	ldi	r31, 0x1F	; 31
    138c:	f3 15       	cp	r31, r3
    138e:	d8 f0       	brcs	.+54     	; 0x13c6 <vfprintf+0x94>
    1390:	8b 32       	cpi	r24, 0x2B	; 43
    1392:	79 f0       	breq	.+30     	; 0x13b2 <vfprintf+0x80>
    1394:	38 f4       	brcc	.+14     	; 0x13a4 <vfprintf+0x72>
    1396:	80 32       	cpi	r24, 0x20	; 32
    1398:	79 f0       	breq	.+30     	; 0x13b8 <vfprintf+0x86>
    139a:	83 32       	cpi	r24, 0x23	; 35
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <vfprintf+0x94>
    139e:	23 2d       	mov	r18, r3
    13a0:	20 61       	ori	r18, 0x10	; 16
    13a2:	1d c0       	rjmp	.+58     	; 0x13de <vfprintf+0xac>
    13a4:	8d 32       	cpi	r24, 0x2D	; 45
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <vfprintf+0x8e>
    13a8:	80 33       	cpi	r24, 0x30	; 48
    13aa:	69 f4       	brne	.+26     	; 0x13c6 <vfprintf+0x94>
    13ac:	23 2d       	mov	r18, r3
    13ae:	21 60       	ori	r18, 0x01	; 1
    13b0:	16 c0       	rjmp	.+44     	; 0x13de <vfprintf+0xac>
    13b2:	83 2d       	mov	r24, r3
    13b4:	82 60       	ori	r24, 0x02	; 2
    13b6:	38 2e       	mov	r3, r24
    13b8:	e3 2d       	mov	r30, r3
    13ba:	e4 60       	ori	r30, 0x04	; 4
    13bc:	3e 2e       	mov	r3, r30
    13be:	2a c0       	rjmp	.+84     	; 0x1414 <vfprintf+0xe2>
    13c0:	f3 2d       	mov	r31, r3
    13c2:	f8 60       	ori	r31, 0x08	; 8
    13c4:	1d c0       	rjmp	.+58     	; 0x1400 <vfprintf+0xce>
    13c6:	37 fc       	sbrc	r3, 7
    13c8:	2d c0       	rjmp	.+90     	; 0x1424 <vfprintf+0xf2>
    13ca:	20 ed       	ldi	r18, 0xD0	; 208
    13cc:	28 0f       	add	r18, r24
    13ce:	2a 30       	cpi	r18, 0x0A	; 10
    13d0:	40 f0       	brcs	.+16     	; 0x13e2 <vfprintf+0xb0>
    13d2:	8e 32       	cpi	r24, 0x2E	; 46
    13d4:	b9 f4       	brne	.+46     	; 0x1404 <vfprintf+0xd2>
    13d6:	36 fc       	sbrc	r3, 6
    13d8:	75 c1       	rjmp	.+746    	; 0x16c4 <vfprintf+0x392>
    13da:	23 2d       	mov	r18, r3
    13dc:	20 64       	ori	r18, 0x40	; 64
    13de:	32 2e       	mov	r3, r18
    13e0:	19 c0       	rjmp	.+50     	; 0x1414 <vfprintf+0xe2>
    13e2:	36 fe       	sbrs	r3, 6
    13e4:	06 c0       	rjmp	.+12     	; 0x13f2 <vfprintf+0xc0>
    13e6:	8a e0       	ldi	r24, 0x0A	; 10
    13e8:	98 9e       	mul	r9, r24
    13ea:	20 0d       	add	r18, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	92 2e       	mov	r9, r18
    13f0:	11 c0       	rjmp	.+34     	; 0x1414 <vfprintf+0xe2>
    13f2:	ea e0       	ldi	r30, 0x0A	; 10
    13f4:	2e 9e       	mul	r2, r30
    13f6:	20 0d       	add	r18, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	22 2e       	mov	r2, r18
    13fc:	f3 2d       	mov	r31, r3
    13fe:	f0 62       	ori	r31, 0x20	; 32
    1400:	3f 2e       	mov	r3, r31
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <vfprintf+0xe2>
    1404:	8c 36       	cpi	r24, 0x6C	; 108
    1406:	21 f4       	brne	.+8      	; 0x1410 <vfprintf+0xde>
    1408:	83 2d       	mov	r24, r3
    140a:	80 68       	ori	r24, 0x80	; 128
    140c:	38 2e       	mov	r3, r24
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0xe2>
    1410:	88 36       	cpi	r24, 0x68	; 104
    1412:	41 f4       	brne	.+16     	; 0x1424 <vfprintf+0xf2>
    1414:	f7 01       	movw	r30, r14
    1416:	93 fd       	sbrc	r25, 3
    1418:	85 91       	lpm	r24, Z+
    141a:	93 ff       	sbrs	r25, 3
    141c:	81 91       	ld	r24, Z+
    141e:	7f 01       	movw	r14, r30
    1420:	81 11       	cpse	r24, r1
    1422:	b3 cf       	rjmp	.-154    	; 0x138a <vfprintf+0x58>
    1424:	98 2f       	mov	r25, r24
    1426:	9f 7d       	andi	r25, 0xDF	; 223
    1428:	95 54       	subi	r25, 0x45	; 69
    142a:	93 30       	cpi	r25, 0x03	; 3
    142c:	28 f4       	brcc	.+10     	; 0x1438 <vfprintf+0x106>
    142e:	0c 5f       	subi	r16, 0xFC	; 252
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	9f e3       	ldi	r25, 0x3F	; 63
    1434:	99 83       	std	Y+1, r25	; 0x01
    1436:	0d c0       	rjmp	.+26     	; 0x1452 <vfprintf+0x120>
    1438:	83 36       	cpi	r24, 0x63	; 99
    143a:	31 f0       	breq	.+12     	; 0x1448 <vfprintf+0x116>
    143c:	83 37       	cpi	r24, 0x73	; 115
    143e:	71 f0       	breq	.+28     	; 0x145c <vfprintf+0x12a>
    1440:	83 35       	cpi	r24, 0x53	; 83
    1442:	09 f0       	breq	.+2      	; 0x1446 <vfprintf+0x114>
    1444:	55 c0       	rjmp	.+170    	; 0x14f0 <vfprintf+0x1be>
    1446:	20 c0       	rjmp	.+64     	; 0x1488 <vfprintf+0x156>
    1448:	f8 01       	movw	r30, r16
    144a:	80 81       	ld	r24, Z
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	0e 5f       	subi	r16, 0xFE	; 254
    1450:	1f 4f       	sbci	r17, 0xFF	; 255
    1452:	88 24       	eor	r8, r8
    1454:	83 94       	inc	r8
    1456:	91 2c       	mov	r9, r1
    1458:	53 01       	movw	r10, r6
    145a:	12 c0       	rjmp	.+36     	; 0x1480 <vfprintf+0x14e>
    145c:	28 01       	movw	r4, r16
    145e:	f2 e0       	ldi	r31, 0x02	; 2
    1460:	4f 0e       	add	r4, r31
    1462:	51 1c       	adc	r5, r1
    1464:	f8 01       	movw	r30, r16
    1466:	a0 80       	ld	r10, Z
    1468:	b1 80       	ldd	r11, Z+1	; 0x01
    146a:	36 fe       	sbrs	r3, 6
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <vfprintf+0x142>
    146e:	69 2d       	mov	r22, r9
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x146>
    1474:	6f ef       	ldi	r22, 0xFF	; 255
    1476:	7f ef       	ldi	r23, 0xFF	; 255
    1478:	c5 01       	movw	r24, r10
    147a:	38 d1       	rcall	.+624    	; 0x16ec <strnlen>
    147c:	4c 01       	movw	r8, r24
    147e:	82 01       	movw	r16, r4
    1480:	f3 2d       	mov	r31, r3
    1482:	ff 77       	andi	r31, 0x7F	; 127
    1484:	3f 2e       	mov	r3, r31
    1486:	15 c0       	rjmp	.+42     	; 0x14b2 <vfprintf+0x180>
    1488:	28 01       	movw	r4, r16
    148a:	22 e0       	ldi	r18, 0x02	; 2
    148c:	42 0e       	add	r4, r18
    148e:	51 1c       	adc	r5, r1
    1490:	f8 01       	movw	r30, r16
    1492:	a0 80       	ld	r10, Z
    1494:	b1 80       	ldd	r11, Z+1	; 0x01
    1496:	36 fe       	sbrs	r3, 6
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <vfprintf+0x16e>
    149a:	69 2d       	mov	r22, r9
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <vfprintf+0x172>
    14a0:	6f ef       	ldi	r22, 0xFF	; 255
    14a2:	7f ef       	ldi	r23, 0xFF	; 255
    14a4:	c5 01       	movw	r24, r10
    14a6:	17 d1       	rcall	.+558    	; 0x16d6 <strnlen_P>
    14a8:	4c 01       	movw	r8, r24
    14aa:	f3 2d       	mov	r31, r3
    14ac:	f0 68       	ori	r31, 0x80	; 128
    14ae:	3f 2e       	mov	r3, r31
    14b0:	82 01       	movw	r16, r4
    14b2:	33 fc       	sbrc	r3, 3
    14b4:	19 c0       	rjmp	.+50     	; 0x14e8 <vfprintf+0x1b6>
    14b6:	82 2d       	mov	r24, r2
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	88 16       	cp	r8, r24
    14bc:	99 06       	cpc	r9, r25
    14be:	a0 f4       	brcc	.+40     	; 0x14e8 <vfprintf+0x1b6>
    14c0:	b6 01       	movw	r22, r12
    14c2:	80 e2       	ldi	r24, 0x20	; 32
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	1d d1       	rcall	.+570    	; 0x1702 <fputc>
    14c8:	2a 94       	dec	r2
    14ca:	f5 cf       	rjmp	.-22     	; 0x14b6 <vfprintf+0x184>
    14cc:	f5 01       	movw	r30, r10
    14ce:	37 fc       	sbrc	r3, 7
    14d0:	85 91       	lpm	r24, Z+
    14d2:	37 fe       	sbrs	r3, 7
    14d4:	81 91       	ld	r24, Z+
    14d6:	5f 01       	movw	r10, r30
    14d8:	b6 01       	movw	r22, r12
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	12 d1       	rcall	.+548    	; 0x1702 <fputc>
    14de:	21 10       	cpse	r2, r1
    14e0:	2a 94       	dec	r2
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	82 1a       	sub	r8, r18
    14e6:	91 08       	sbc	r9, r1
    14e8:	81 14       	cp	r8, r1
    14ea:	91 04       	cpc	r9, r1
    14ec:	79 f7       	brne	.-34     	; 0x14cc <vfprintf+0x19a>
    14ee:	e1 c0       	rjmp	.+450    	; 0x16b2 <vfprintf+0x380>
    14f0:	84 36       	cpi	r24, 0x64	; 100
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <vfprintf+0x1c6>
    14f4:	89 36       	cpi	r24, 0x69	; 105
    14f6:	39 f5       	brne	.+78     	; 0x1546 <vfprintf+0x214>
    14f8:	f8 01       	movw	r30, r16
    14fa:	37 fe       	sbrs	r3, 7
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <vfprintf+0x1da>
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	0c 5f       	subi	r16, 0xFC	; 252
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	08 c0       	rjmp	.+16     	; 0x151c <vfprintf+0x1ea>
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	07 2e       	mov	r0, r23
    1512:	00 0c       	add	r0, r0
    1514:	88 0b       	sbc	r24, r24
    1516:	99 0b       	sbc	r25, r25
    1518:	0e 5f       	subi	r16, 0xFE	; 254
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	f3 2d       	mov	r31, r3
    151e:	ff 76       	andi	r31, 0x6F	; 111
    1520:	3f 2e       	mov	r3, r31
    1522:	97 ff       	sbrs	r25, 7
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <vfprintf+0x206>
    1526:	90 95       	com	r25
    1528:	80 95       	com	r24
    152a:	70 95       	com	r23
    152c:	61 95       	neg	r22
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	f0 68       	ori	r31, 0x80	; 128
    1536:	3f 2e       	mov	r3, r31
    1538:	2a e0       	ldi	r18, 0x0A	; 10
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	a3 01       	movw	r20, r6
    153e:	1d d1       	rcall	.+570    	; 0x177a <__ultoa_invert>
    1540:	88 2e       	mov	r8, r24
    1542:	86 18       	sub	r8, r6
    1544:	44 c0       	rjmp	.+136    	; 0x15ce <vfprintf+0x29c>
    1546:	85 37       	cpi	r24, 0x75	; 117
    1548:	31 f4       	brne	.+12     	; 0x1556 <vfprintf+0x224>
    154a:	23 2d       	mov	r18, r3
    154c:	2f 7e       	andi	r18, 0xEF	; 239
    154e:	b2 2e       	mov	r11, r18
    1550:	2a e0       	ldi	r18, 0x0A	; 10
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	25 c0       	rjmp	.+74     	; 0x15a0 <vfprintf+0x26e>
    1556:	93 2d       	mov	r25, r3
    1558:	99 7f       	andi	r25, 0xF9	; 249
    155a:	b9 2e       	mov	r11, r25
    155c:	8f 36       	cpi	r24, 0x6F	; 111
    155e:	c1 f0       	breq	.+48     	; 0x1590 <vfprintf+0x25e>
    1560:	18 f4       	brcc	.+6      	; 0x1568 <vfprintf+0x236>
    1562:	88 35       	cpi	r24, 0x58	; 88
    1564:	79 f0       	breq	.+30     	; 0x1584 <vfprintf+0x252>
    1566:	ae c0       	rjmp	.+348    	; 0x16c4 <vfprintf+0x392>
    1568:	80 37       	cpi	r24, 0x70	; 112
    156a:	19 f0       	breq	.+6      	; 0x1572 <vfprintf+0x240>
    156c:	88 37       	cpi	r24, 0x78	; 120
    156e:	21 f0       	breq	.+8      	; 0x1578 <vfprintf+0x246>
    1570:	a9 c0       	rjmp	.+338    	; 0x16c4 <vfprintf+0x392>
    1572:	e9 2f       	mov	r30, r25
    1574:	e0 61       	ori	r30, 0x10	; 16
    1576:	be 2e       	mov	r11, r30
    1578:	b4 fe       	sbrs	r11, 4
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <vfprintf+0x264>
    157c:	fb 2d       	mov	r31, r11
    157e:	f4 60       	ori	r31, 0x04	; 4
    1580:	bf 2e       	mov	r11, r31
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <vfprintf+0x264>
    1584:	34 fe       	sbrs	r3, 4
    1586:	0a c0       	rjmp	.+20     	; 0x159c <vfprintf+0x26a>
    1588:	29 2f       	mov	r18, r25
    158a:	26 60       	ori	r18, 0x06	; 6
    158c:	b2 2e       	mov	r11, r18
    158e:	06 c0       	rjmp	.+12     	; 0x159c <vfprintf+0x26a>
    1590:	28 e0       	ldi	r18, 0x08	; 8
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <vfprintf+0x26e>
    1596:	20 e1       	ldi	r18, 0x10	; 16
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x26e>
    159c:	20 e1       	ldi	r18, 0x10	; 16
    159e:	32 e0       	ldi	r19, 0x02	; 2
    15a0:	f8 01       	movw	r30, r16
    15a2:	b7 fe       	sbrs	r11, 7
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <vfprintf+0x282>
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	0c 5f       	subi	r16, 0xFC	; 252
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <vfprintf+0x28e>
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 5f       	subi	r16, 0xFE	; 254
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	a3 01       	movw	r20, r6
    15c2:	db d0       	rcall	.+438    	; 0x177a <__ultoa_invert>
    15c4:	88 2e       	mov	r8, r24
    15c6:	86 18       	sub	r8, r6
    15c8:	fb 2d       	mov	r31, r11
    15ca:	ff 77       	andi	r31, 0x7F	; 127
    15cc:	3f 2e       	mov	r3, r31
    15ce:	36 fe       	sbrs	r3, 6
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <vfprintf+0x2ba>
    15d2:	23 2d       	mov	r18, r3
    15d4:	2e 7f       	andi	r18, 0xFE	; 254
    15d6:	a2 2e       	mov	r10, r18
    15d8:	89 14       	cp	r8, r9
    15da:	58 f4       	brcc	.+22     	; 0x15f2 <vfprintf+0x2c0>
    15dc:	34 fe       	sbrs	r3, 4
    15de:	0b c0       	rjmp	.+22     	; 0x15f6 <vfprintf+0x2c4>
    15e0:	32 fc       	sbrc	r3, 2
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <vfprintf+0x2c4>
    15e4:	83 2d       	mov	r24, r3
    15e6:	8e 7e       	andi	r24, 0xEE	; 238
    15e8:	a8 2e       	mov	r10, r24
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <vfprintf+0x2c4>
    15ec:	b8 2c       	mov	r11, r8
    15ee:	a3 2c       	mov	r10, r3
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <vfprintf+0x2c6>
    15f2:	b8 2c       	mov	r11, r8
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <vfprintf+0x2c6>
    15f6:	b9 2c       	mov	r11, r9
    15f8:	a4 fe       	sbrs	r10, 4
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <vfprintf+0x2e8>
    15fc:	fe 01       	movw	r30, r28
    15fe:	e8 0d       	add	r30, r8
    1600:	f1 1d       	adc	r31, r1
    1602:	80 81       	ld	r24, Z
    1604:	80 33       	cpi	r24, 0x30	; 48
    1606:	21 f4       	brne	.+8      	; 0x1610 <vfprintf+0x2de>
    1608:	9a 2d       	mov	r25, r10
    160a:	99 7e       	andi	r25, 0xE9	; 233
    160c:	a9 2e       	mov	r10, r25
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <vfprintf+0x2f0>
    1610:	a2 fe       	sbrs	r10, 2
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <vfprintf+0x2ee>
    1614:	b3 94       	inc	r11
    1616:	b3 94       	inc	r11
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <vfprintf+0x2f0>
    161a:	8a 2d       	mov	r24, r10
    161c:	86 78       	andi	r24, 0x86	; 134
    161e:	09 f0       	breq	.+2      	; 0x1622 <vfprintf+0x2f0>
    1620:	b3 94       	inc	r11
    1622:	a3 fc       	sbrc	r10, 3
    1624:	10 c0       	rjmp	.+32     	; 0x1646 <vfprintf+0x314>
    1626:	a0 fe       	sbrs	r10, 0
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <vfprintf+0x304>
    162a:	b2 14       	cp	r11, r2
    162c:	80 f4       	brcc	.+32     	; 0x164e <vfprintf+0x31c>
    162e:	28 0c       	add	r2, r8
    1630:	92 2c       	mov	r9, r2
    1632:	9b 18       	sub	r9, r11
    1634:	0d c0       	rjmp	.+26     	; 0x1650 <vfprintf+0x31e>
    1636:	b2 14       	cp	r11, r2
    1638:	58 f4       	brcc	.+22     	; 0x1650 <vfprintf+0x31e>
    163a:	b6 01       	movw	r22, r12
    163c:	80 e2       	ldi	r24, 0x20	; 32
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	60 d0       	rcall	.+192    	; 0x1702 <fputc>
    1642:	b3 94       	inc	r11
    1644:	f8 cf       	rjmp	.-16     	; 0x1636 <vfprintf+0x304>
    1646:	b2 14       	cp	r11, r2
    1648:	18 f4       	brcc	.+6      	; 0x1650 <vfprintf+0x31e>
    164a:	2b 18       	sub	r2, r11
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x320>
    164e:	98 2c       	mov	r9, r8
    1650:	21 2c       	mov	r2, r1
    1652:	a4 fe       	sbrs	r10, 4
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <vfprintf+0x342>
    1656:	b6 01       	movw	r22, r12
    1658:	80 e3       	ldi	r24, 0x30	; 48
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	52 d0       	rcall	.+164    	; 0x1702 <fputc>
    165e:	a2 fe       	sbrs	r10, 2
    1660:	16 c0       	rjmp	.+44     	; 0x168e <vfprintf+0x35c>
    1662:	a1 fc       	sbrc	r10, 1
    1664:	03 c0       	rjmp	.+6      	; 0x166c <vfprintf+0x33a>
    1666:	88 e7       	ldi	r24, 0x78	; 120
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x33e>
    166c:	88 e5       	ldi	r24, 0x58	; 88
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	b6 01       	movw	r22, r12
    1672:	0c c0       	rjmp	.+24     	; 0x168c <vfprintf+0x35a>
    1674:	8a 2d       	mov	r24, r10
    1676:	86 78       	andi	r24, 0x86	; 134
    1678:	51 f0       	breq	.+20     	; 0x168e <vfprintf+0x35c>
    167a:	a1 fe       	sbrs	r10, 1
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <vfprintf+0x350>
    167e:	8b e2       	ldi	r24, 0x2B	; 43
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <vfprintf+0x352>
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	a7 fc       	sbrc	r10, 7
    1686:	8d e2       	ldi	r24, 0x2D	; 45
    1688:	b6 01       	movw	r22, r12
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	3a d0       	rcall	.+116    	; 0x1702 <fputc>
    168e:	89 14       	cp	r8, r9
    1690:	30 f4       	brcc	.+12     	; 0x169e <vfprintf+0x36c>
    1692:	b6 01       	movw	r22, r12
    1694:	80 e3       	ldi	r24, 0x30	; 48
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	34 d0       	rcall	.+104    	; 0x1702 <fputc>
    169a:	9a 94       	dec	r9
    169c:	f8 cf       	rjmp	.-16     	; 0x168e <vfprintf+0x35c>
    169e:	8a 94       	dec	r8
    16a0:	f3 01       	movw	r30, r6
    16a2:	e8 0d       	add	r30, r8
    16a4:	f1 1d       	adc	r31, r1
    16a6:	80 81       	ld	r24, Z
    16a8:	b6 01       	movw	r22, r12
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	2a d0       	rcall	.+84     	; 0x1702 <fputc>
    16ae:	81 10       	cpse	r8, r1
    16b0:	f6 cf       	rjmp	.-20     	; 0x169e <vfprintf+0x36c>
    16b2:	22 20       	and	r2, r2
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <vfprintf+0x386>
    16b6:	4e ce       	rjmp	.-868    	; 0x1354 <vfprintf+0x22>
    16b8:	b6 01       	movw	r22, r12
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	21 d0       	rcall	.+66     	; 0x1702 <fputc>
    16c0:	2a 94       	dec	r2
    16c2:	f7 cf       	rjmp	.-18     	; 0x16b2 <vfprintf+0x380>
    16c4:	f6 01       	movw	r30, r12
    16c6:	86 81       	ldd	r24, Z+6	; 0x06
    16c8:	97 81       	ldd	r25, Z+7	; 0x07
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x39e>
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	9f ef       	ldi	r25, 0xFF	; 255
    16d0:	2b 96       	adiw	r28, 0x0b	; 11
    16d2:	e2 e1       	ldi	r30, 0x12	; 18
    16d4:	cc c0       	rjmp	.+408    	; 0x186e <__epilogue_restores__>

000016d6 <strnlen_P>:
    16d6:	fc 01       	movw	r30, r24
    16d8:	05 90       	lpm	r0, Z+
    16da:	61 50       	subi	r22, 0x01	; 1
    16dc:	70 40       	sbci	r23, 0x00	; 0
    16de:	01 10       	cpse	r0, r1
    16e0:	d8 f7       	brcc	.-10     	; 0x16d8 <strnlen_P+0x2>
    16e2:	80 95       	com	r24
    16e4:	90 95       	com	r25
    16e6:	8e 0f       	add	r24, r30
    16e8:	9f 1f       	adc	r25, r31
    16ea:	08 95       	ret

000016ec <strnlen>:
    16ec:	fc 01       	movw	r30, r24
    16ee:	61 50       	subi	r22, 0x01	; 1
    16f0:	70 40       	sbci	r23, 0x00	; 0
    16f2:	01 90       	ld	r0, Z+
    16f4:	01 10       	cpse	r0, r1
    16f6:	d8 f7       	brcc	.-10     	; 0x16ee <strnlen+0x2>
    16f8:	80 95       	com	r24
    16fa:	90 95       	com	r25
    16fc:	8e 0f       	add	r24, r30
    16fe:	9f 1f       	adc	r25, r31
    1700:	08 95       	ret

00001702 <fputc>:
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	fb 01       	movw	r30, r22
    170c:	23 81       	ldd	r18, Z+3	; 0x03
    170e:	21 fd       	sbrc	r18, 1
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <fputc+0x16>
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	9f ef       	ldi	r25, 0xFF	; 255
    1716:	2c c0       	rjmp	.+88     	; 0x1770 <fputc+0x6e>
    1718:	22 ff       	sbrs	r18, 2
    171a:	16 c0       	rjmp	.+44     	; 0x1748 <fputc+0x46>
    171c:	46 81       	ldd	r20, Z+6	; 0x06
    171e:	57 81       	ldd	r21, Z+7	; 0x07
    1720:	24 81       	ldd	r18, Z+4	; 0x04
    1722:	35 81       	ldd	r19, Z+5	; 0x05
    1724:	42 17       	cp	r20, r18
    1726:	53 07       	cpc	r21, r19
    1728:	44 f4       	brge	.+16     	; 0x173a <fputc+0x38>
    172a:	a0 81       	ld	r26, Z
    172c:	b1 81       	ldd	r27, Z+1	; 0x01
    172e:	9d 01       	movw	r18, r26
    1730:	2f 5f       	subi	r18, 0xFF	; 255
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	31 83       	std	Z+1, r19	; 0x01
    1736:	20 83       	st	Z, r18
    1738:	8c 93       	st	X, r24
    173a:	26 81       	ldd	r18, Z+6	; 0x06
    173c:	37 81       	ldd	r19, Z+7	; 0x07
    173e:	2f 5f       	subi	r18, 0xFF	; 255
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	37 83       	std	Z+7, r19	; 0x07
    1744:	26 83       	std	Z+6, r18	; 0x06
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <fputc+0x6e>
    1748:	8b 01       	movw	r16, r22
    174a:	ec 01       	movw	r28, r24
    174c:	fb 01       	movw	r30, r22
    174e:	00 84       	ldd	r0, Z+8	; 0x08
    1750:	f1 85       	ldd	r31, Z+9	; 0x09
    1752:	e0 2d       	mov	r30, r0
    1754:	09 95       	icall
    1756:	89 2b       	or	r24, r25
    1758:	e1 f6       	brne	.-72     	; 0x1712 <fputc+0x10>
    175a:	d8 01       	movw	r26, r16
    175c:	16 96       	adiw	r26, 0x06	; 6
    175e:	8d 91       	ld	r24, X+
    1760:	9c 91       	ld	r25, X
    1762:	17 97       	sbiw	r26, 0x07	; 7
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	17 96       	adiw	r26, 0x07	; 7
    1768:	9c 93       	st	X, r25
    176a:	8e 93       	st	-X, r24
    176c:	16 97       	sbiw	r26, 0x06	; 6
    176e:	ce 01       	movw	r24, r28
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <__ultoa_invert>:
    177a:	fa 01       	movw	r30, r20
    177c:	aa 27       	eor	r26, r26
    177e:	28 30       	cpi	r18, 0x08	; 8
    1780:	51 f1       	breq	.+84     	; 0x17d6 <__ultoa_invert+0x5c>
    1782:	20 31       	cpi	r18, 0x10	; 16
    1784:	81 f1       	breq	.+96     	; 0x17e6 <__ultoa_invert+0x6c>
    1786:	e8 94       	clt
    1788:	6f 93       	push	r22
    178a:	6e 7f       	andi	r22, 0xFE	; 254
    178c:	6e 5f       	subi	r22, 0xFE	; 254
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8f 4f       	sbci	r24, 0xFF	; 255
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	af 4f       	sbci	r26, 0xFF	; 255
    1796:	b1 e0       	ldi	r27, 0x01	; 1
    1798:	3e d0       	rcall	.+124    	; 0x1816 <__ultoa_invert+0x9c>
    179a:	b4 e0       	ldi	r27, 0x04	; 4
    179c:	3c d0       	rcall	.+120    	; 0x1816 <__ultoa_invert+0x9c>
    179e:	67 0f       	add	r22, r23
    17a0:	78 1f       	adc	r23, r24
    17a2:	89 1f       	adc	r24, r25
    17a4:	9a 1f       	adc	r25, r26
    17a6:	a1 1d       	adc	r26, r1
    17a8:	68 0f       	add	r22, r24
    17aa:	79 1f       	adc	r23, r25
    17ac:	8a 1f       	adc	r24, r26
    17ae:	91 1d       	adc	r25, r1
    17b0:	a1 1d       	adc	r26, r1
    17b2:	6a 0f       	add	r22, r26
    17b4:	71 1d       	adc	r23, r1
    17b6:	81 1d       	adc	r24, r1
    17b8:	91 1d       	adc	r25, r1
    17ba:	a1 1d       	adc	r26, r1
    17bc:	20 d0       	rcall	.+64     	; 0x17fe <__ultoa_invert+0x84>
    17be:	09 f4       	brne	.+2      	; 0x17c2 <__ultoa_invert+0x48>
    17c0:	68 94       	set
    17c2:	3f 91       	pop	r19
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	26 9f       	mul	r18, r22
    17c8:	11 24       	eor	r1, r1
    17ca:	30 19       	sub	r19, r0
    17cc:	30 5d       	subi	r19, 0xD0	; 208
    17ce:	31 93       	st	Z+, r19
    17d0:	de f6       	brtc	.-74     	; 0x1788 <__ultoa_invert+0xe>
    17d2:	cf 01       	movw	r24, r30
    17d4:	08 95       	ret
    17d6:	46 2f       	mov	r20, r22
    17d8:	47 70       	andi	r20, 0x07	; 7
    17da:	40 5d       	subi	r20, 0xD0	; 208
    17dc:	41 93       	st	Z+, r20
    17de:	b3 e0       	ldi	r27, 0x03	; 3
    17e0:	0f d0       	rcall	.+30     	; 0x1800 <__ultoa_invert+0x86>
    17e2:	c9 f7       	brne	.-14     	; 0x17d6 <__ultoa_invert+0x5c>
    17e4:	f6 cf       	rjmp	.-20     	; 0x17d2 <__ultoa_invert+0x58>
    17e6:	46 2f       	mov	r20, r22
    17e8:	4f 70       	andi	r20, 0x0F	; 15
    17ea:	40 5d       	subi	r20, 0xD0	; 208
    17ec:	4a 33       	cpi	r20, 0x3A	; 58
    17ee:	18 f0       	brcs	.+6      	; 0x17f6 <__ultoa_invert+0x7c>
    17f0:	49 5d       	subi	r20, 0xD9	; 217
    17f2:	31 fd       	sbrc	r19, 1
    17f4:	40 52       	subi	r20, 0x20	; 32
    17f6:	41 93       	st	Z+, r20
    17f8:	02 d0       	rcall	.+4      	; 0x17fe <__ultoa_invert+0x84>
    17fa:	a9 f7       	brne	.-22     	; 0x17e6 <__ultoa_invert+0x6c>
    17fc:	ea cf       	rjmp	.-44     	; 0x17d2 <__ultoa_invert+0x58>
    17fe:	b4 e0       	ldi	r27, 0x04	; 4
    1800:	a6 95       	lsr	r26
    1802:	97 95       	ror	r25
    1804:	87 95       	ror	r24
    1806:	77 95       	ror	r23
    1808:	67 95       	ror	r22
    180a:	ba 95       	dec	r27
    180c:	c9 f7       	brne	.-14     	; 0x1800 <__ultoa_invert+0x86>
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	61 05       	cpc	r22, r1
    1812:	71 05       	cpc	r23, r1
    1814:	08 95       	ret
    1816:	9b 01       	movw	r18, r22
    1818:	ac 01       	movw	r20, r24
    181a:	0a 2e       	mov	r0, r26
    181c:	06 94       	lsr	r0
    181e:	57 95       	ror	r21
    1820:	47 95       	ror	r20
    1822:	37 95       	ror	r19
    1824:	27 95       	ror	r18
    1826:	ba 95       	dec	r27
    1828:	c9 f7       	brne	.-14     	; 0x181c <__ultoa_invert+0xa2>
    182a:	62 0f       	add	r22, r18
    182c:	73 1f       	adc	r23, r19
    182e:	84 1f       	adc	r24, r20
    1830:	95 1f       	adc	r25, r21
    1832:	a0 1d       	adc	r26, r0
    1834:	08 95       	ret

00001836 <__prologue_saves__>:
    1836:	2f 92       	push	r2
    1838:	3f 92       	push	r3
    183a:	4f 92       	push	r4
    183c:	5f 92       	push	r5
    183e:	6f 92       	push	r6
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	ca 1b       	sub	r28, r26
    1860:	db 0b       	sbc	r29, r27
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	09 94       	ijmp

0000186e <__epilogue_restores__>:
    186e:	2a 88       	ldd	r2, Y+18	; 0x12
    1870:	39 88       	ldd	r3, Y+17	; 0x11
    1872:	48 88       	ldd	r4, Y+16	; 0x10
    1874:	5f 84       	ldd	r5, Y+15	; 0x0f
    1876:	6e 84       	ldd	r6, Y+14	; 0x0e
    1878:	7d 84       	ldd	r7, Y+13	; 0x0d
    187a:	8c 84       	ldd	r8, Y+12	; 0x0c
    187c:	9b 84       	ldd	r9, Y+11	; 0x0b
    187e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1880:	b9 84       	ldd	r11, Y+9	; 0x09
    1882:	c8 84       	ldd	r12, Y+8	; 0x08
    1884:	df 80       	ldd	r13, Y+7	; 0x07
    1886:	ee 80       	ldd	r14, Y+6	; 0x06
    1888:	fd 80       	ldd	r15, Y+5	; 0x05
    188a:	0c 81       	ldd	r16, Y+4	; 0x04
    188c:	1b 81       	ldd	r17, Y+3	; 0x03
    188e:	aa 81       	ldd	r26, Y+2	; 0x02
    1890:	b9 81       	ldd	r27, Y+1	; 0x01
    1892:	ce 0f       	add	r28, r30
    1894:	d1 1d       	adc	r29, r1
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	ed 01       	movw	r28, r26
    18a2:	08 95       	ret

000018a4 <_exit>:
    18a4:	f8 94       	cli

000018a6 <__stop_program>:
    18a6:	ff cf       	rjmp	.-2      	; 0x18a6 <__stop_program>
